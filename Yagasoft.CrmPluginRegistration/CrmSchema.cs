//         Project / File: Yagasoft.CrmPluginRegistration / CrmSchema.cs
// File generated by: CRM Code Generator - Ahmed Elsawalhy (Yagasoft.com)

using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Linq.Expressions;
using System.Xml.Linq;
using System.Text;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace Yagasoft.CrmPluginRegistration
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="Dependency"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Dependency> DependencySet
		{
			get
			{
				return this.CreateQuery<Dependency>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="PluginAssembly"/> entities.
		/// </summary>
		public System.Linq.IQueryable<PluginAssembly> PluginAssemblySet
		{
			get
			{
				return this.CreateQuery<PluginAssembly>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="PluginType"/> entities.
		/// </summary>
		public System.Linq.IQueryable<PluginType> PluginTypeSet
		{
			get
			{
				return this.CreateQuery<PluginType>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SdkMessage"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SdkMessage> SdkMessageSet
		{
			get
			{
				return this.CreateQuery<SdkMessage>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SdkMessageFilter"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SdkMessageFilter> SdkMessageFilterSet
		{
			get
			{
				return this.CreateQuery<SdkMessageFilter>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SdkMessageProcessingStep"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SdkMessageProcessingStep> SdkMessageProcessingStepSet
		{
			get
			{
				return this.CreateQuery<SdkMessageProcessingStep>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SdkMessageProcessingStepImage"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SdkMessageProcessingStepImage> SdkMessageProcessingStepImageSet
		{
			get
			{
				return this.CreateQuery<SdkMessageProcessingStepImage>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="SdkMessageProcessingStepSecureConfiguration"/> entities.
		/// </summary>
		public System.Linq.IQueryable<SdkMessageProcessingStepSecureConfiguration> SdkMessageProcessingStepSecureConfigurationSet
		{
			get
			{
				return this.CreateQuery<SdkMessageProcessingStepSecureConfiguration>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="User"/> entities.
		/// </summary>
		public System.Linq.IQueryable<User> UserSet
		{
			get
			{
				return this.CreateQuery<User>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Process"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Process> ProcessSet
		{
			get
			{
				return this.CreateQuery<Process>();
			}
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class LinqEntityLimiter : ExpressionVisitor
	{
		protected override Expression VisitNew(NewExpression node)
		{
			var constructor = node.Constructor;
			var parameters = constructor.GetParameters();
			var param = node.Arguments.FirstOrDefault();
			var paramType = param?.Type;

			if (paramType != null && constructor.DeclaringType == paramType
				&& parameters.FirstOrDefault()?.ParameterType == typeof(object))
			{
				var valueGetter = paramType.GetMethod("GetAttributeValue", new[] { typeof(string) })?
					.MakeGenericMethod(typeof(object));

				if (valueGetter != null)
				{
					var limiterType = (node.Arguments.Skip(1).FirstOrDefault() as ConstantExpression)?.Value as Type;

					NewArrayExpression keysInit = null;
					NewArrayExpression valuesInit = null;

					if (limiterType == null && (parameters.Length == 1 || parameters.Skip(1).FirstOrDefault()?.ParameterType == typeof(Type)))
					{
						var attributes = paramType.GetProperties().Cast<MemberInfo>().Union(paramType.GetFields())
							.Where(e => Attribute.IsDefined(e, typeof(AttributeLogicalNameAttribute))).ToArray();

						keysInit = Expression.NewArrayInit(typeof(string), attributes
							.Select(e => Expression.Constant(e.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName)));
						valuesInit = Expression.NewArrayInit(typeof(object), attributes
							.Select(e => Expression.Call(param, valueGetter,
								Expression.Constant(e.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName))));
					}
					else if (limiterType != null && typeof(EntityContract).IsAssignableFrom(limiterType)
						&& parameters.Skip(1).FirstOrDefault()?.ParameterType == typeof(Type))
					{
						var attributes = limiterType.GetProperties().Cast<MemberInfo>().Union(limiterType.GetFields())
							.Where(e => Attribute.IsDefined(e, typeof(CrmFieldMappingAttribute))
								&& !Attribute.IsDefined(e, typeof(CrmRelationMappingAttribute))).ToArray();

						keysInit = Expression.NewArrayInit(typeof(string), attributes
							.Select(e => Expression.Constant(e.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName)));
						valuesInit = Expression.NewArrayInit(typeof(object), attributes
							.Select(e => Expression.Call(param, valueGetter,
								Expression.Constant(e.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName))));
					}

					if (keysInit != null)
					{
						var constructorInfo = paramType.GetConstructor(new[] { typeof(string[]), typeof(object[]) });

						if (constructorInfo != null)
						{
							return Expression.New(constructorInfo, keysInit, valuesInit);
						}
					}
				}
			}

			return base.VisitNew(node);
		}
	}

	/// <summary>
	/// Credits: https://github.com/davidfowl/QueryInterceptor
	/// </summary>
	public static class QueryableExtensions
    {
        public static IQueryable<T> InterceptWith<T>(this IQueryable<T> source, params ExpressionVisitor[] visitors)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            return new QueryTranslator<T>(source, visitors);
        }
    }

    internal class QueryTranslator<T> : IOrderedQueryable<T>
    {
	    public Type ElementType => typeof(T);
        public Expression Expression { get; }
        public IQueryProvider Provider => provider;

		private readonly QueryTranslatorProvider<T> provider;

        public QueryTranslator(IQueryable source, IEnumerable<ExpressionVisitor> visitors)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            if (visitors == null)
            {
                throw new ArgumentNullException(nameof(visitors));
            }

            Expression = Expression.Constant(this);
            provider = new QueryTranslatorProvider<T>(source, visitors);
        }

        public QueryTranslator(IQueryable source, Expression expression, IEnumerable<ExpressionVisitor> visitors)
        {
	        Expression = expression ?? throw new ArgumentNullException(nameof(expression));
            provider = new QueryTranslatorProvider<T>(source, visitors);
        }

        public IEnumerator<T> GetEnumerator()
        {
            return ((IEnumerable<T>)provider.ExecuteEnumerable(Expression)).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return provider.ExecuteEnumerable(Expression).GetEnumerator();
        }
    }

    internal abstract class QueryTranslatorProvider : ExpressionVisitor
    {
	    internal IQueryable Source { get; }

		protected QueryTranslatorProvider(IQueryable source)
        {
			Source = source ?? throw new ArgumentNullException(nameof(source));
        }
	}

    internal class QueryTranslatorProvider<T> : QueryTranslatorProvider, IQueryProvider
    {
        private readonly IEnumerable<ExpressionVisitor> visitors;

        public QueryTranslatorProvider(IQueryable source, IEnumerable<ExpressionVisitor> visitors)
            : base(source)
        {
	        this.visitors = visitors ?? throw new ArgumentNullException(nameof(visitors));
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            return new QueryTranslator<TElement>(Source, expression, visitors);
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var elementType = expression.Type.GetGenericArguments().First();
            var result = (IQueryable)Activator.CreateInstance(typeof(QueryTranslator<>).MakeGenericType(elementType),
				Source, expression, visitors);

            return result;
        }

        public TResult Execute<TResult>(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var result = (this as IQueryProvider).Execute(expression);

            return (TResult)result;
        }

        public object Execute(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var translated = VisitAll(expression);

            return Source.Provider.Execute(translated);
        }

        internal IEnumerable ExecuteEnumerable(Expression expression)
        {
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            var translated = VisitAll(expression);

            return Source.Provider.CreateQuery(translated);
        }

        private Expression VisitAll(Expression expression)
        {
            // Run all visitors in order
            var visitorsQ = new ExpressionVisitor[] { this }.Concat(visitors);
            return visitorsQ.Aggregate(expression, (expr, visitor) => visitor.Visit(expr));
        }

        protected override Expression VisitConstant(ConstantExpression node)
        {
            // Fix up the Expression tree to work with the underlying LINQ provider
	        if (!node.Type.IsGenericType || node.Type.GetGenericTypeDefinition() != typeof(QueryTranslator<>))
	        {
		        return base.VisitConstant(node);
	        }

	        var provider = ((IQueryable)node.Value).Provider as QueryTranslatorProvider;

	        return provider == null ? Source.Expression : provider.Source.Expression;
        }
    }

	#endregion

	#region Extensions

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	public static partial class CrmGeneratorExtensions
	{
		private class RelationProperty
		{
			internal PropertyInfo Property;
			internal RelationshipSchemaNameAttribute RelationAttribute;
		}

		private static IDictionary<string, IEnumerable<RelationProperty>> relationPropertyCache =
			new ConcurrentDictionary<string, IEnumerable<RelationProperty>>();

	    public static IEnumerable<TEntity> ProcessFetchXmlRelations<TEntity>(this IEnumerable<TEntity> entitiesParam, string fetchXml)
			where TEntity : GeneratedEntityBase
	    {
		    if (string.IsNullOrWhiteSpace(fetchXml))
		    {
				throw new ArgumentNullException(nameof(fetchXml));
		    }

		    if (entitiesParam == null)
		    {
				throw new ArgumentNullException(nameof(entitiesParam));
		    }

		    var entities = entitiesParam.ToArray();

		    if (!entities.Any())
		    {
			    return new TEntity[0];
		    }

		    foreach (var entity in entities)
			{
				var depth = 0;
				ProcessEntity(entity, entity, XElement.Parse(fetchXml).Element("entity"), ref depth);
			}

		    return entities.GroupBy(e => e.Id).Select(ConsolidateEntity).Where(e => e?.Id != Guid.Empty);
	    }

	    private static void ProcessEntity(Entity baseEntity, GeneratedEntityBase targetEntity, XElement xmlElement,
			ref int depth, string intersectingEntity = null)
	    {
		    foreach (var xLink in xmlElement.Elements("link-entity"))
		    {
			    depth++;

			    var linkedName = xLink.Attribute("name")?.Value;
			    var from = xLink.Attribute("from")?.Value;
			    var to = xLink.Attribute("to")?.Value;
			    var alias = GetLinkAlias(xLink, depth);

			    if (string.IsNullOrWhiteSpace(linkedName))
			    {
				    throw new ArgumentNullException(nameof(linkedName), "Linked entity name could not be found in FetchXML.");
			    }

			    if (string.IsNullOrWhiteSpace(from))
			    {
				    throw new ArgumentNullException(nameof(from), 
						$"'from' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    if (string.IsNullOrWhiteSpace(to))
			    {
				    throw new ArgumentNullException(nameof(to), 
						$"'to' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    if (string.IsNullOrWhiteSpace(alias))
			    {
				    throw new ArgumentNullException(nameof(alias), 
						$"'alias' value could not be found in FetchXML for '{linkedName}'.");
			    }

			    var relationParameters = targetEntity.RelationProperties
				    .Select(p => p.Value)
				    .Where(p => p.Length >= 5)
				    .FirstOrDefault(p => p[1].ToString() == linkedName && p[3].ToString() == from && p[4].ToString() == to);
			    var isNn = false;

			    if (relationParameters == null)
			    {
					// intersecting
				    relationParameters = targetEntity.RelationProperties
					    .Select(p => p.Value)
					    .Where(p => p.Length >= 9)
					    .FirstOrDefault(p => linkedName == p[2].ToString());
					isNn = true;

				    if (relationParameters == null)
				    {
					    relationParameters = targetEntity.RelationProperties
						    .Select(p => p.Value)
						    .Where(p => p.Length >= 3)
						    .FirstOrDefault(p => p[2].ToString() == intersectingEntity);
						isNn = false;

					    if (relationParameters == null)
					    {
						    continue;
					    }
				    }
			    }

			    var role = (relationParameters[8] as Type)?.IsArray == true ? EntityRole.Referenced : EntityRole.Referencing;
			    var schemaName = relationParameters[7].ToString();

			    var relationProperties = GetRelationInfoCache(targetEntity);

			    var relationProperty = relationProperties.FirstOrDefault(pa =>
				    pa.RelationAttribute.SchemaName == schemaName
					    && (pa.RelationAttribute.PrimaryEntityRole == role || pa.RelationAttribute.PrimaryEntityRole == null))?
				    .Property;
			    var propertyType = relationProperty?.PropertyType;

			    if (propertyType == null)
			    {
				    continue;
			    }

			    var relatedEntity = PrepareRelation(targetEntity, relationProperty);

			    if (relatedEntity == null)
			    {
				    continue;
			    }

			    foreach (var xAttribute in xLink.Elements("attribute"))
			    {
				    ProcessXAttribute(baseEntity, relatedEntity, alias, xAttribute);
			    }

			    if (xLink.Elements("all-attributes").Any())
			    {
				    ProcessAllAttributes(baseEntity, relatedEntity, alias);
			    }

				// go over the related entity as well for its own relations
			    ProcessEntity(baseEntity, isNn ? targetEntity : relatedEntity, xLink, ref depth, isNn ? linkedName : null);
		    }
	    }

		private static IEnumerable<RelationProperty> GetRelationInfoCache(GeneratedEntityBase targetEntity)
		{
			if (!relationPropertyCache.TryGetValue(targetEntity.LogicalName, out var relationProperties))
			{
				relationProperties = relationPropertyCache[targetEntity.LogicalName] =
					targetEntity.GetType().GetProperties()
						.Where(p => Attribute.IsDefined(p, typeof(RelationshipSchemaNameAttribute)))
						.Select(p =>
							new RelationProperty
							{
								Property = p,
								RelationAttribute = p.GetCustomAttribute<RelationshipSchemaNameAttribute>()
							});
			}

			return relationProperties;
		}

		private static string GetLinkAlias(XElement xLink, int depth)
	    {
		    var linkedName = xLink.Attribute("name")?.Value;

		    if (string.IsNullOrWhiteSpace(linkedName))
		    {
			    return null;
		    }

		    var alias = xLink.Attribute("alias")?.Value;

		    if (string.IsNullOrWhiteSpace(alias))
		    {
			    alias = $"{linkedName}{depth}";
		    }

		    return alias;
	    }

	    private static GeneratedEntityBase PrepareRelation(GeneratedEntityBase targetEntity, PropertyInfo relationProperty)
	    {
		    var propertyType = relationProperty?.PropertyType;

		    if (propertyType == null)
		    {
			    return null;
		    }

		    var isArray = typeof(IEnumerable).IsAssignableFrom(propertyType);
		    var relatedEntityType = propertyType;

		    if (isArray)
		    {
			    relatedEntityType = propertyType.GetElementType();
		    }

		    if (relatedEntityType == null)
		    {
			    return null;
		    }

		    var relatedEntity = Activator.CreateInstance(relatedEntityType) as GeneratedEntityBase;

		    if (relatedEntity == null)
		    {
			    return null;
		    }

		    object relatedValue = relatedEntity;
		    var currentValue = relationProperty.GetValue(targetEntity);

		    if (isArray)
		    {
			    var relatedList = (object[])(currentValue ?? Activator.CreateInstance(propertyType, 1));
			    relatedList[0] = relatedEntity;
			    relatedValue = relatedList;
		    }
		    else if (currentValue != null)
		    {
			    // already parsed N-1
			    return null;
		    }

		    relationProperty.SetValue(targetEntity, relatedValue);

		    return relatedEntity;
	    }

		private static void ProcessXAttribute(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias,
			XElement xAttribute)
		{
			var	attributeName = xAttribute.Attribute("name")?.Value;
			var attributeAlias = xAttribute.Attribute("alias")?.Value;
			var isAliasedSame = string.IsNullOrWhiteSpace(relatedAlias) || attributeName == attributeAlias;

			if (!string.IsNullOrWhiteSpace(attributeAlias))
			{
				attributeName = attributeAlias;
			}

			ProcessAttribute(baseEntity, relatedEntity, relatedAlias, attributeName, isAliasedSame);
		}

		private static void ProcessAttribute(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias,
			string attributeName, bool isAliasedSame)
	    {
		    var attribute = baseEntity.Attributes
			    .FirstOrDefault(a => !string.IsNullOrWhiteSpace(relatedAlias) && a.Key == $"{relatedAlias}.{attributeName}").Value
			    ?? baseEntity.Attributes
				    .FirstOrDefault(a => isAliasedSame && a.Key == attributeName).Value;

		    if (attribute is AliasedValue)
		    {
			    var aliasedValue = attribute as AliasedValue;
			    relatedEntity[aliasedValue.AttributeLogicalName] = aliasedValue.Value;
			    return;
		    }

		    if (attribute != null)
		    {
			    relatedEntity[attributeName] = attribute;
		    }
	    }

		private static void ProcessAllAttributes(Entity baseEntity, GeneratedEntityBase relatedEntity, string relatedAlias)
		{
			var attributes = baseEntity.Attributes
				.Where(a =>
					string.IsNullOrWhiteSpace(relatedAlias)
						? !a.Key.Contains($".")
						: a.Key.StartsWith($"{relatedAlias}."));

			foreach (var pair in attributes)
			{
				var attribute = pair.Value;

				AliasedValue aliasedValue;

				if (attribute is AliasedValue)
				{
					aliasedValue = attribute as AliasedValue;
					relatedEntity[aliasedValue.AttributeLogicalName] = aliasedValue.Value;
					continue;
				}

				if (attribute != null)
				{
					relatedEntity[pair.Key] = attribute;
				}
			}
	    }

	    private static TEntity ConsolidateEntity<TEntity>(IGrouping<Guid, TEntity> grouping)
		    where TEntity : GeneratedEntityBase
	    {
		    if (!grouping.Any())
		    {
			    return null;
		    }

		    var baseEntity = grouping.First();

		    var relationProperties = GetRelationInfoCache(baseEntity);
		    var baseRelationProperties = relationProperties
			    .Where(x => x.Property.PropertyType.IsArray
				    && (x.RelationAttribute.PrimaryEntityRole == EntityRole.Referenced
					    || x.RelationAttribute.PrimaryEntityRole == null)).ToArray();

		    foreach (var entity in grouping.Skip(1))
		    {
			    foreach (var relationProperty in baseRelationProperties)
			    {
				    var currentBaseRelationInfo = baseRelationProperties
					    .FirstOrDefault(x => x.RelationAttribute.SchemaName == relationProperty.RelationAttribute.SchemaName)?
						.Property;
				    var currentRelation = (GeneratedEntityBase[])relationProperty.Property.GetValue(entity);

				    if (currentBaseRelationInfo == null || currentRelation == null)
				    {
					    relationProperty.Property.SetValue(baseEntity, null);
					    continue;
				    }

				    var currentBaseRelation = ((GeneratedEntityBase[])currentBaseRelationInfo.GetValue(baseEntity))?
						.Where(e => e?.Id != Guid.Empty).ToArray();

					if (currentBaseRelation == null || !currentBaseRelation.Any())
					{
						currentBaseRelationInfo.SetValue(baseEntity, null);
						continue;
					}

					var baseLength = currentBaseRelation?.Length ?? 0;

				    var newBaseRelation = (GeneratedEntityBase[])Activator.CreateInstance(currentRelation.GetType(), baseLength + 1);

				    if (currentBaseRelation?.Length > 0)
				    {
					    Array.Copy(currentBaseRelation, newBaseRelation, baseLength);
				    }

				    Array.Copy(currentRelation.Where(e => e?.Id != Guid.Empty).ToArray(), 0, newBaseRelation, baseLength, 1);
				    currentBaseRelationInfo.SetValue(baseEntity, newBaseRelation);
			    }
		    }

		    foreach (var baseRelationPropertyInfo in baseRelationProperties)
		    {
			    var baseRelationProperty = baseRelationPropertyInfo.Property;

				var currentRelation = (GeneratedEntityBase[])baseRelationProperty.GetValue(baseEntity);
				var currentRelationFiltered = currentRelation?.Where(e => e?.Id != Guid.Empty).ToArray();

				if (currentRelationFiltered == null || !currentRelationFiltered.Any())
			    {
					baseRelationProperty.SetValue(baseEntity, null);
				    continue;
			    }

			    var related = currentRelation.GroupBy(e => e.Id).Select(ConsolidateEntity)
					.Where(e => e?.Id != Guid.Empty).ToArray();

				if (related == null || !related.Any())
				{
					baseRelationProperty.SetValue(baseEntity, null);
					continue;
				}

				var newRelation = (GeneratedEntityBase[])Activator.CreateInstance(currentRelation.GetType(), related.Length);
			    Array.Copy(related, newRelation, related.Length);
				baseRelationProperty.SetValue(baseEntity, newRelation);
		    }

		    return baseEntity;
	    }
		
		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Calling this method on a LINQ will result in limiting attributes retrieved from CRM on any early-bound entity in
		///     the query.<br />
		///     The properties defined in the entity's class will be the ones retrieved from CRM by default; all other attributes
		///     in CRM will be ignored.<br />
		///     The entity <b>must</b> be passed to a constructor of the same type.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account)).ToList()
		/// </code>
		/// </summary>
		public static IQueryable<TEntity> LimitAttributes<TEntity>(this IQueryable<TEntity> q) where TEntity : Entity
		{
			return q.InterceptWith(new LinqEntityLimiter());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Range,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "Range", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;


			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this GeneratedEntityBase crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;
			var properties = entityType.GetProperties().ToArray();

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in properties
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			var relations = properties
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))).ToArray();

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in relations)
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			var flattableRelations = relations
				.Select(r =>
					new
					{
						r,
						p = properties
							.Where(p => Attribute.IsDefined(p, typeof(CrmFieldMappingAttribute))
								   && Attribute.IsDefined(p, typeof(CrmRelationMappingAttribute)))
							.Where(
								p =>
								{
									var rAttr = r.GetCustomAttribute<CrmRelationMappingAttribute>();
									var pAttr = p.GetCustomAttribute<CrmRelationMappingAttribute>();
									return rAttr.SchemaName == pAttr.SchemaName
										&& rAttr.Role == pAttr.Role;
								})
					})
				.Where(r => r.p.Any());

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var r in flattableRelations)
			{
				SetRelationInRecord(record, r.r, r.p);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, PropertyInfo field, GeneratedEntityBase crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			var crmValue = crmRecord.GetAttributeValue<object>(mapping.LogicalName);

			if (crmValue == null)
			{
				return;
			}

			var crmField = crmRecord.GetType().GetProperties()
				.FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(AttributeLogicalNameAttribute))
					&& propQ.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName == mapping.LogicalName);

			if (crmField == null)
			{
				return;
			}

			var value = crmField.GetValue(crmRecord);

			if (value == null)
			{
				return;
			}

			// convert types
			if (value is Enum)
			{
				var underlyingType = Nullable.GetUnderlyingType(field.PropertyType);

				if (underlyingType == null)
				{
					return;
				}

				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(underlyingType, Convert.ToInt32(value)));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (crmValue is EntityReference)
			{
				var entityRef = (EntityReference) crmValue;

				if (field.PropertyType == typeof(Guid?))
				{
					field.SetValue(entity, entityRef.Id);
				}
				else if (field.PropertyType == typeof(LookupValue))
				{
					field.SetValue(entity, new LookupValue(entityRef.LogicalName, entityRef.Id));
				}

				var nameField = typeof(TEntity).GetProperties().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, PropertyInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelation = crmRecord.GetType().GetProperties()
				.FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(RelationshipSchemaNameAttribute))
					&& propQ.GetCustomAttribute<RelationshipSchemaNameAttribute>().SchemaName == mapping.SchemaName
					&& propQ.GetCustomAttribute<RelationshipSchemaNameAttribute>().PrimaryEntityRole.ToString() == mapping.Role.ToString());

			if (crmRelation == null)
			{
				return;
			}

			var fieldType = field.PropertyType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				var value = crmRelation.GetValue(crmRecord) as Array;

				if (value == null || value.Length <= 0)
				{
					return;
				}

				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				if (elementType == null)
				{
					return;
				}

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, value.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType?
					.GetMethod("ConvertTo")?.MakeGenericMethod(elementType);

				if (method == null)
				{
					return;
				}

				// convert all entities to contract entities
				var objectRelatedRecords =
					(from object relatedRecord in value
					 select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				var value = crmRelation.GetValue(crmRecord) as GeneratedEntityBase;

				if (value == null)
				{
					return;
				}

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType?
					.GetMethod("ConvertTo")?.MakeGenericMethod(fieldType);

				if (method == null)
				{
					return;
				}

				convertedValue = method.Invoke(value, new object[] { value });
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		private static void SetRelationInRecord(object record, PropertyInfo relationInfo, IEnumerable<PropertyInfo> flatPropertiesP)
		{
			var relation = relationInfo.GetValue(record);

			if (relation == null)
			{
				return;
			}

			var flatProperties = flatPropertiesP.ToArray();

			var relationProperties = relationInfo.PropertyType.GetProperties()
				.Where(p => Attribute.IsDefined(p, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(p, typeof(CrmRelationMappingAttribute)));

			foreach (var relationProperty in relationProperties)
			{
				var flatProperty = flatProperties
					.FirstOrDefault(f => f.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName
						== relationProperty.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName);

				if (flatProperty == null)
				{
					continue;
				}

				flatProperty.SetValue(record, relationProperty.GetValue(relation));
			}

			relationInfo.SetValue(record, null);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity	{
		protected GeneratedEntityBase()
		{}

		protected GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		/// <summary>
		///     Initialises this entity with the given keys and values.
		/// </summary>
		protected GeneratedEntityBase(string[] keys, object[] values, string logicalName) : this(logicalName)
		{
			for (var i = 0; i < keys.Length; i++)
			{
				var key = keys[i];
				var value = values[i];

				if (value == null)
				{
					continue;
				}

				Attributes[key] = value;
			}
		}

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type.<br />
		/// <b>OR</b> ...<br />
		///     Constructor that Limits attributes retrieved from CRM on any early-bound entity in a LINQ query.<br />
		///     The properties and fields defined in this class will be the ones retrieved from CRM by default; all other attributes
		///     in CRM will be ignored.<br />
		///     The selected early-bound record of this class's type in the query <b>must</b> be passed to this constructor.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account)).ToList()
		/// </code>
		/// </summary>
		protected GeneratedEntityBase(object obj, string logicalName) : base(logicalName)
		{ }

		/// <summary>
		///     Limits attributes retrieved from CRM on any early-bound entity in a LINQ.<br />
		///     The properties and fields defined in the 'limitingType' class will be the ones retrieved from CRM by default;
		///     all other attributes in CRM will be ignored.<br />
		///     The selected early-bound record of this class's type in the query <b>must</b> be passed to this constructor.<br />
		///     Example:
		///     <code>
		/// (from account in new XrmServiceContext(service).AccountSet
		/// select new Account(account, typeof(AccountModel))).ToList()
		/// </code>
		/// </summary>
		protected GeneratedEntityBase(object obj, Type limitingType, string logicalName) : base(logicalName)
		{ }

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		public virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		protected GeneratedEntity(string logicalName) : base(logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(string[] keys, object[] values, string logicalName) : base(keys, values, logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(object obj, Type limitingType, string logicalName) : base(obj, limitingType, logicalName)
		{ }

		/// <inheritdoc/>
		protected GeneratedEntity(object obj, string logicalName) : base(obj, logicalName)
		{ }

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	public enum ValidationType
	{
		Required,
		Range,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class LookupKeysBase
	{
		public string Name;

		protected LookupKeysBase(string name)
		{
			Name = name;
		}
	}

	public interface ILookupKeys<in TKey> where TKey : LookupKeysBase
	{
		void AddKey(TKey key, object value);
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public class CrmActionBase<TInputs, TOutputs>
		where TInputs : CrmActionBase<TInputs, TOutputs>.InputsBase, new()
		where TOutputs : CrmActionBase<TInputs, TOutputs>.OutputsBase, new()
	{
		public IOrganizationService Service;
		public OrganizationRequest Request;
		public OrganizationResponse Response;
		public TInputs InputParams;
		public TOutputs OutputFields;
		
		public CrmActionBase(string actionName)
		{
			Request = new OrganizationRequest(actionName);
			InputParams = new TInputs() { Request = Request };
		}
		
		public CrmActionBase(IOrganizationService service, string actionName) : this(actionName)
		{
			Service = service;
		}

		public TOutputs Execute(IOrganizationService service = null)
		{
			if (service != null)
			{
				Service = service;
			}

			Response = Service.Execute(Request);

			return OutputFields = new TOutputs() { Response = Response };
		}
				
		public abstract class InputsBase
		{
			public OrganizationRequest Request;

			public InputsBase()
			{ }

			public InputsBase(OrganizationRequest request)
			{
				Request = request;
			}
		}
		
		public abstract class OutputsBase
		{
			public OrganizationResponse Response;

			public OutputsBase()
			{ }

			public OutputsBase(OrganizationResponse response)
			{
				Response = response;
			}
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return null;
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return null;
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return null;
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? null : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class TypeHelpers
	{
		public static Type GetType(string name, Type assemblyScope = null)
		{
			return assemblyScope == null
				? AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes())
					.FirstOrDefault(e => e.AssemblyQualifiedName == name || e.FullName == name || e.Name == name)
				: assemblyScope.Assembly.GetTypes()
					.FirstOrDefault(e => e.AssemblyQualifiedName == name || e.FullName == name || e.Name == name);
		}
	}

	public partial class EntityContract
	{
		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception($"Entity '{entityType.Name}' doesn't map to CRM entity '{typeof(TCrmEntity).Name}'.");
			}

			clearMode = clearMode
				?? (ClearMode?)entityType.GetProperty("ValueClearMode")?.GetValue(this)
					?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
				// get the clear flag mode value if it exists
				var isClearFlag = clearMode == ClearMode.Flag
					&& (bool?)entityType.GetProperties().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
						.Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
				// check 'empty' mode
				var isClearEmpty = clearMode == ClearMode.Empty;
				var isClearConvention = clearMode == ClearMode.Convention;

				var isSetValue = value != null || isClearFlag || isClearEmpty || isClearConvention;

				// skip if no value and clear mode does not match and pass check
				if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode, isClearFlag);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, PropertyInfo propertyInfo)
		{
			// get the property representing the relationship
			var relation = GetType().GetProperties()
				.Where(fQ => !Attribute.IsDefined(fQ, typeof(CrmFieldMappingAttribute))
					&& Attribute.IsDefined(fQ, typeof(CrmRelationMappingAttribute)))
				.FirstOrDefault(
					fQ =>
					{
						var rAttr = fQ.GetCustomAttribute<CrmRelationMappingAttribute>();
						var relationAttr = propertyInfo.GetCustomAttribute<CrmRelationMappingAttribute>();
						return rAttr.SchemaName == relationAttr.SchemaName && rAttr.Role == relationAttr.Role;
					});

			if (relation == null)
			{
				return;
			}

			// get the related entity type
			var type = relation.PropertyType;
			// get the target property in the related entity to set the value
			var mappedProperty = type.GetProperties()
				.Where(fQ => Attribute.IsDefined(fQ, typeof(CrmFieldMappingAttribute))
					&& !Attribute.IsDefined(fQ, typeof(CrmRelationMappingAttribute)))
				.FirstOrDefault(p => p.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName
					== propertyInfo.GetCustomAttribute<CrmFieldMappingAttribute>().LogicalName);

			if (mappedProperty == null)
			{
				return;
			}

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(type);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			mappedProperty.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null, bool isClearFlag = false)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			if (crmProperty == null)
			{
				return;
			}
            
			// if no value, and clear mode is global or flagged, then clear
			if (value == null && (clearMode == ClearMode.Empty || isClearFlag))
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				var intVal = Convert.ToInt32(value);
				crmRecord[mapping.LogicalName] =
					(intVal == -1 && clearMode == ClearMode.Convention)
						? null
						: new OptionSetValue(intVal);
			}
			else if (value is decimal && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] =
					(value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention)
						? null
						: new Money(((decimal?)value).Value);
			}
			else if (value is Guid && fieldName != "Id" && crmProperty.PropertyType == typeof(Guid?))
			{
				crmProperty.SetValue(crmRecord,
					(value.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
						? null
						: (Guid?)value);
			}
			else if (value is LookupValue)
			{
				var lookupValue = (LookupValue)value;

				if (crmProperty.PropertyType == typeof(LookupValue))
				{
					crmProperty.SetValue(crmRecord,
						(lookupValue.Id.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
							? null
							: value);
				}
				else if (crmProperty.PropertyType == typeof(EntityReference))
				{
					crmProperty.SetValue(crmRecord,
						(lookupValue.Id.Equals(Guid.Empty) && clearMode == ClearMode.Convention)
							? null
							: new EntityReference(lookupValue.EntityName, lookupValue.Id));
				}
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int && value.Equals(int.MinValue))
                        || (value is long && value.Equals(long.MinValue))
                        || (value is decimal && value.Equals(decimal.MinValue))
                        || (value is double && value.Equals(double.MinValue))
                        || (value is Array && (value as Array).Length <= 0)
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception($"Entity doesn't map to CRM entity '{typeof(TCrmEntity).Name}'.");
			}

			object convertedValue = null;

			var type = TypeHelpers.GetType(mapping.RelatedEntityName);

			if (type == null)
			{
				throw new TypeLoadException($"Could not find type {mapping.RelatedEntityName} to convert contract record.");
			}

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(type, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), type);

				if (method == null)
				{
					return;
				}

				// convert all entities to CRM entities
				var objectCrmRelatedRecords =
					(from object relatedRecord in relatedRecords
					 select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, type);

				if (method == null)
				{
					return;
				}

				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")?.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == (EntityRole?)mapping.Role;
								});

			return crmRelation;
		}
	}

	#endregion


	#region Actions

	#endregion

	#region Known Types

	#endregion

	#region Entities

	#region Dependency

	/// <summary>
	/// 'Dependency'.<br />
	/// A component dependency in CRM.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("dependency")]
	public partial class Dependency : GeneratedEntity<Dependency.RelationName>
	{
		public Dependency() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Dependency(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Dependency(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Dependency";
		public const string SchemaName = "Dependency";
		public const string EntityLogicalName = "dependency";
		public const int EntityTypeCode = 7105;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("dependencyid")]
		public override System.Guid Id
		{
			get => (DependencyIdentifierId == null || DependencyIdentifierId == Guid.Empty) ? base.Id : DependencyIdentifierId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("dependencyid");
                    base.Id = value;
                } else {
				    DependencyIdentifierId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'DependencyId'.<br />
        /// Unique identifier of a dependency.
        /// </summary>
		[AttributeLogicalName("dependencyid")]
		public Guid? DependencyIdentifierId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("dependencyid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("dependencyid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'DependencyType'.<br />
        /// The dependency type of the dependency.
        /// </summary>
		[AttributeLogicalName("dependencytype")]
		public GlobalEnums.DependencyType? DependencyType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("dependencytype");
				return (GlobalEnums.DependencyType?)value?.Value;
			}
		}

		[AttributeLogicalName("dependentcomponentbasesolutionid")]
		public Guid? DependentComponentBaseSolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("dependentcomponentbasesolutionid");
			    return value;
			}
		}

        /// <summary>
        /// [Required] 
		/// 'DependentComponentNodeId'.<br />
        /// Unique identifier of the dependent component's node.
        /// </summary>
		[AttributeLogicalName("dependentcomponentnodeid")]
		public Guid? DependentComponent
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("dependentcomponentnodeid");
                return value?.Id;
			}
		}

        public string DependentComponentName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("dependentcomponentnodeid");
                return value?.Name;
            }
        }

		[AttributeLogicalName("dependentcomponentobjectid")]
		public Guid? DependentComponentObjectId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("dependentcomponentobjectid");
			    return value;
			}
		}

		[AttributeLogicalName("dependentcomponentparentid")]
		public Guid? DependentComponentParentId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("dependentcomponentparentid");
			    return value;
			}
		}

		[AttributeLogicalName("dependentcomponenttype")]
		public GlobalEnums.ComponentType? DependentComponentType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("dependentcomponenttype");
				return (GlobalEnums.ComponentType?)value?.Value;
			}
		}

		[AttributeLogicalName("requiredcomponentbasesolutionid")]
		public Guid? RequiredComponentBaseSolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("requiredcomponentbasesolutionid");
			    return value;
			}
		}

		[AttributeLogicalName("requiredcomponentintroducedversion")]
		public double? RequiredComponentIntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<double?>("requiredcomponentintroducedversion");
			    return value;
			}
		}

        /// <summary>
        /// [Required] 
		/// 'RequiredComponentNodeId'.<br />
        /// Unique identifier of the required component's node
        /// </summary>
		[AttributeLogicalName("requiredcomponentnodeid")]
		public Guid? RequiredComponent
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("requiredcomponentnodeid");
                return value?.Id;
			}
		}

        public string RequiredComponentName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("requiredcomponentnodeid");
                return value?.Name;
            }
        }

		[AttributeLogicalName("requiredcomponentobjectid")]
		public Guid? RequiredComponentObjectId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("requiredcomponentobjectid");
			    return value;
			}
		}

		[AttributeLogicalName("requiredcomponentparentid")]
		public Guid? RequiredComponentParentId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("requiredcomponentparentid");
			    return value;
			}
		}

		[AttributeLogicalName("requiredcomponenttype")]
		public GlobalEnums.ComponentType? RequiredComponentType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("requiredcomponenttype");
				return (GlobalEnums.ComponentType?)value?.Value;
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		public static class RelationNames {
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public Dependency(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#region PluginAssembly

	/// <summary>
	/// 'PluginAssembly'.<br />
	/// Assembly that contains one or more plug-in types.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("pluginassembly")]
	public partial class PluginAssembly : GeneratedEntity<PluginAssembly.RelationName>
	{
		public PluginAssembly() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public PluginAssembly(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public PluginAssembly(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Plug-in Assembly";
		public const string SchemaName = "PluginAssembly";
		public const string EntityLogicalName = "pluginassembly";
		public const int EntityTypeCode = 4605;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("pluginassemblyid")]
		public override System.Guid Id
		{
			get => (PluginAssemblyIdId == null || PluginAssemblyIdId == Guid.Empty) ? base.Id : PluginAssemblyIdId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("pluginassemblyid");
                    base.Id = value;
                } else {
				    PluginAssemblyIdId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AuthType'.<br />
        /// Specifies mode of authentication with web sources like WebApp
        /// </summary>
		[AttributeLogicalName("authtype")]
		public SpecifiesmodeofauthenticationwithwebsourcesEnum? Specifiesmodeofauthenticationwithwebsources
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("authtype");
				return (SpecifiesmodeofauthenticationwithwebsourcesEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("authtype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("authtype", value);
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public GlobalEnums.ComponentState? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				return (GlobalEnums.ComponentState?)value?.Value;
			}
		}

        /// <summary>
        /// [MaxLength=1073741823] 
		/// 'Content'.<br />
        /// Bytes of the assembly, in Base64 format.
        /// </summary>
		[AttributeLogicalName("content")]
		public string Content
		{
			get
			{
				var value = GetAttributeValue<string>("content");
			    return value;
			}
			set
			{
                SetAttributeValue("content", value);
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the plug-in assembly was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the pluginassembly.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=32] 
		/// 'Culture'.<br />
        /// Culture code for the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("culture")]
		public string Culture
		{
			get
			{
				var value = GetAttributeValue<string>("culture");
			    return value;
			}
			set
			{
                SetAttributeValue("culture", value);
			}
		}

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization Level.
        /// </summary>
		[AttributeLogicalName("customizationlevel")]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'Description'.<br />
        /// Description of the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("description")]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
			    return value;
			}
			set
			{
                SetAttributeValue("description", value);
			}
		}

        /// <summary>
        /// [MaxLength=48] 
		/// 'IntroducedVersion'.<br />
        /// Version in which the form is introduced.
        /// </summary>
		[AttributeLogicalName("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<string>("introducedversion");
			    return value;
			}
			set
			{
                SetAttributeValue("introducedversion", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomizable'.<br />
        /// Information that specifies whether this component can be customized.
        /// </summary>
		[AttributeLogicalName("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			    return value;
			}
			set
			{
                SetAttributeValue("iscustomizable", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsHidden'.<br />
        /// Information that specifies whether this component should be hidden.
        /// </summary>
		[AttributeLogicalName("ishidden")]
		public BooleanManagedProperty Hidden
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("ishidden");
			    return value;
			}
			set
			{
                SetAttributeValue("ishidden", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsManaged'.<br />
        /// Information that specifies whether this component is managed.
        /// </summary>
		[AttributeLogicalName("ismanaged")]
		public bool? State
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'IsolationMode'.<br />
        /// Information about how the plugin assembly is to be isolated at execution time; None / Sandboxed.
        /// </summary>
		[AttributeLogicalName("isolationmode")]
		public IsolationModeEnum? IsolationMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("isolationmode");
				return (IsolationModeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("isolationmode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("isolationmode", value);
			}
		}

		[AttributeLogicalName("ispasswordset")]
		public bool? IsPasswordSet
		{
			get
			{
				var value = GetAttributeValue<bool?>("ispasswordset");
			    return value;
			}
		}

        /// <summary>
        /// [Range(0, 65534)] 
		/// 'Major'.<br />
        /// Major of the assembly version.
        /// </summary>
		[AttributeLogicalName("major")]
		public int? Major
		{
			get
			{
				var value = GetAttributeValue<int?>("major");
			    return value;
			}
		}

        /// <summary>
        /// [Range(0, 65534)] 
		/// 'Minor'.<br />
        /// Minor of the assembly version.
        /// </summary>
		[AttributeLogicalName("minor")]
		public int? Minor
		{
			get
			{
				var value = GetAttributeValue<int?>("minor");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the plug-in assembly was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the pluginassembly.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=256] 
		/// 'Name'.<br />
        /// Name of the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
			    return value;
			}
			set
			{
                SetAttributeValue("name", value);
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the plug-in assembly is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'Path'.<br />
        /// File name of the plug-in assembly. Used when the source type is set to 1.
        /// </summary>
		[AttributeLogicalName("path")]
		public string Path
		{
			get
			{
				var value = GetAttributeValue<string>("path");
			    return value;
			}
			set
			{
                SetAttributeValue("path", value);
			}
		}

        /// <summary>
        ///  
		/// 'PluginAssemblyId'.<br />
        /// Unique identifier of the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("pluginassemblyid")]
		public Guid? PluginAssemblyIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("pluginassemblyid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("pluginassemblyid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'PluginAssemblyIdUnique'.<br />
        /// Unique identifier of the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("pluginassemblyidunique")]
		public Guid? PluginAssemblyIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("pluginassemblyidunique");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=32] 
		/// 'PublicKeyToken'.<br />
        /// Public key token of the assembly. This value can be obtained from the assembly by using reflection.
        /// </summary>
		[AttributeLogicalName("publickeytoken")]
		public string PublicKeyToken
		{
			get
			{
				var value = GetAttributeValue<string>("publickeytoken");
			    return value;
			}
			set
			{
                SetAttributeValue("publickeytoken", value);
			}
		}

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'SourceHash'.<br />
        /// Hash of the source of the assembly.
        /// </summary>
		[AttributeLogicalName("sourcehash")]
		public string SourceHash
		{
			get
			{
				var value = GetAttributeValue<string>("sourcehash");
			    return value;
			}
			set
			{
                SetAttributeValue("sourcehash", value);
			}
		}

        /// <summary>
        ///  
		/// 'SourceType'.<br />
        /// Location of the assembly, for example 0=database, 1=on-disk.
        /// </summary>
		[AttributeLogicalName("sourcetype")]
		public SourceTypeEnum? SourceType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("sourcetype");
				return (SourceTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("sourcetype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("sourcetype", value);
			}
		}

        /// <summary>
        /// [MaxLength=2000] 
		/// 'Url'.<br />
        /// Web Url
        /// </summary>
		[AttributeLogicalName("url")]
		public string WebUrl
		{
			get
			{
				var value = GetAttributeValue<string>("url");
			    return value;
			}
			set
			{
                SetAttributeValue("url", value);
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'UserName'.<br />
        /// User Name
        /// </summary>
		[AttributeLogicalName("username")]
		public string UserName
		{
			get
			{
				var value = GetAttributeValue<string>("username");
			    return value;
			}
			set
			{
                SetAttributeValue("username", value);
			}
		}

        /// <summary>
        /// [MaxLength=48] 
		/// 'Version'.<br />
        /// Version number of the assembly. The value can be obtained from the assembly through reflection.
        /// </summary>
		[AttributeLogicalName("version")]
		public string Version
		{
			get
			{
				var value = GetAttributeValue<string>("version");
			    return value;
			}
			set
			{
                SetAttributeValue("version", value);
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'pluginassembly_plugintype'
		/// </summary>
		[RelationshipSchemaName("pluginassembly_plugintype")]
		public PluginType[] PluginTypesOfPluginAssembly
		{
			get => GetRelatedEntities<PluginType>("pluginassembly_plugintype", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("pluginassembly_plugintype", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'createdby_pluginassembly'
		/// </summary>
		[RelationshipSchemaName("createdby_pluginassembly"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("createdby_pluginassembly", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("createdby_pluginassembly", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_pluginassembly_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_pluginassembly_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_pluginassembly_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_pluginassembly_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_pluginassembly_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_pluginassembly_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_pluginassembly_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_pluginassembly_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'modifiedby_pluginassembly'
		/// </summary>
		[RelationshipSchemaName("modifiedby_pluginassembly"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("modifiedby_pluginassembly", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("modifiedby_pluginassembly", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName PluginTypesOfPluginAssembly = new RelationName("PluginTypesOfPluginAssembly");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["PluginTypesOfPluginAssembly"] = new object[] { "PluginTypesOfPluginAssembly", "plugintype", "pluginassembly", "pluginassemblyid", "pluginassemblyid", "pluginassemblyid", "pluginassemblyid", "pluginassembly_plugintype", typeof (PluginType[]) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "pluginassembly", "systemuserid", "createdby", "pluginassemblyid", "pluginassemblyid", "createdby_pluginassembly", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "pluginassembly", "systemuserid", "createdonbehalfby", "pluginassemblyid", "pluginassemblyid", "lk_pluginassembly_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "pluginassembly", "systemuserid", "modifiedonbehalfby", "pluginassemblyid", "pluginassemblyid", "lk_pluginassembly_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "pluginassembly", "systemuserid", "modifiedby", "pluginassemblyid", "pluginassemblyid", "modifiedby_pluginassembly", typeof (User) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public PluginAssembly(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["pluginassemblyid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum SpecifiesmodeofauthenticationwithwebsourcesEnum
		{
			BasicAuth = 0,
		}
	
		public enum StateEnum
		{
			Managed = 1,
			Unmanaged = 0,
		}
	
		public enum IsolationModeEnum
		{
			None = 1,
			Sandbox = 2,
			External = 3,
		}
	
		public enum IsPasswordSetEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum SourceTypeEnum
		{
			Database = 0,
			Disk = 1,
			Normal = 2,
			AzureWebApp = 3,
		}
	
		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#region PluginType

	/// <summary>
	/// 'PluginType'.<br />
	/// Type that inherits from the IPlugin interface and is contained within a plug-in assembly.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("plugintype")]
	public partial class PluginType : GeneratedEntity<PluginType.RelationName>
	{
		public PluginType() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public PluginType(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public PluginType(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Plug-in Type";
		public const string SchemaName = "PluginType";
		public const string EntityLogicalName = "plugintype";
		public const int EntityTypeCode = 4602;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("plugintypeid")]
		public override System.Guid Id
		{
			get => (PluginTypeId == null || PluginTypeId == Guid.Empty) ? base.Id : PluginTypeId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("plugintypeid");
                    base.Id = value;
                } else {
				    PluginTypeId = value;
                }
			}
		}

        /// <summary>
        /// [Required][MaxLength=100] 
		/// 'AssemblyName'.<br />
        /// Full path name of the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("assemblyname")]
		public string AssemblyName
		{
			get
			{
				var value = GetAttributeValue<string>("assemblyname");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public GlobalEnums.ComponentState? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				return (GlobalEnums.ComponentState?)value?.Value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the plug-in type.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the plug-in type was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the plugintype.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Required][MaxLength=32] 
		/// 'Culture'.<br />
        /// Culture code for the plug-in assembly.
        /// </summary>
		[AttributeLogicalName("culture")]
		public string Culture
		{
			get
			{
				var value = GetAttributeValue<string>("culture");
			    return value;
			}
		}

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the plug-in type.
        /// </summary>
		[AttributeLogicalName("customizationlevel")]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=1048576] 
		/// 'CustomWorkflowActivityInfo'.<br />
        /// Serialized Custom Activity Type information, including required arguments. For more information, see SandboxCustomActivityInfo.
        /// </summary>
		[AttributeLogicalName("customworkflowactivityinfo")]
		public string CustomWorkflowActivityInfo
		{
			get
			{
				var value = GetAttributeValue<string>("customworkflowactivityinfo");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'Description'.<br />
        /// Description of the plug-in type.
        /// </summary>
		[AttributeLogicalName("description")]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
			    return value;
			}
			set
			{
                SetAttributeValue("description", value);
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'FriendlyName'.<br />
        /// User friendly name for the plug-in.
        /// </summary>
		[AttributeLogicalName("friendlyname")]
		public string DisplayName_FriendlyName
		{
			get
			{
				var value = GetAttributeValue<string>("friendlyname");
			    return value;
			}
			set
			{
                SetAttributeValue("friendlyname", value);
			}
		}

		[AttributeLogicalName("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'IsWorkflowActivity'.<br />
        /// Indicates if the plug-in is a custom activity for workflows.
        /// </summary>
		[AttributeLogicalName("isworkflowactivity")]
		public bool? IsWorkflowActivity
		{
			get
			{
				var value = GetAttributeValue<bool?>("isworkflowactivity");
			    return value;
			}
		}

        /// <summary>
        /// [Range(0, 65534)] 
		/// 'Major'.<br />
        /// Major of the version number of the assembly for the plug-in type.
        /// </summary>
		[AttributeLogicalName("major")]
		public int? Versionmajor
		{
			get
			{
				var value = GetAttributeValue<int?>("major");
			    return value;
			}
		}

        /// <summary>
        /// [Range(0, 65534)] 
		/// 'Minor'.<br />
        /// Minor of the version number of the assembly for the plug-in type.
        /// </summary>
		[AttributeLogicalName("minor")]
		public int? Versionminor
		{
			get
			{
				var value = GetAttributeValue<int?>("minor");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the plug-in type.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the plug-in type was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the plugintype.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=256] 
		/// 'Name'.<br />
        /// Name of the plug-in type.
        /// </summary>
		[AttributeLogicalName("name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
			    return value;
			}
			set
			{
                SetAttributeValue("name", value);
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the plug-in type is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'PluginAssemblyId'.<br />
        /// Unique identifier of the plug-in assembly that contains this plug-in type.
        /// </summary>
		[AttributeLogicalName("pluginassemblyid")]
		public Guid? PluginAssembly
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("pluginassemblyid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("pluginassemblyid", new EntityReference("pluginassembly", value.Value));
                else
	                SetAttributeValue("pluginassemblyid", value);
			}
		}

        public string PluginAssemblyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("pluginassemblyid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'PluginTypeId'.<br />
        /// Unique identifier of the plug-in type.
        /// </summary>
		[AttributeLogicalName("plugintypeid")]
		public Guid? PluginTypeId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("plugintypeid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("plugintypeid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'PluginTypeIdUnique'.<br />
        /// Unique identifier of the plug-in type.
        /// </summary>
		[AttributeLogicalName("plugintypeidunique")]
		public Guid? PluginTypeIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("plugintypeidunique");
			    return value;
			}
		}

        /// <summary>
        /// [Required][MaxLength=32] 
		/// 'PublicKeyToken'.<br />
        /// Public key token of the assembly for the plug-in type.
        /// </summary>
		[AttributeLogicalName("publickeytoken")]
		public string PublicKeyToken
		{
			get
			{
				var value = GetAttributeValue<string>("publickeytoken");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'TypeName'.<br />
        /// Fully qualified type name of the plug-in type.
        /// </summary>
		[AttributeLogicalName("typename")]
		public string TypeName
		{
			get
			{
				var value = GetAttributeValue<string>("typename");
			    return value;
			}
			set
			{
                SetAttributeValue("typename", value);
			}
		}

        /// <summary>
        /// [Required][MaxLength=48] 
		/// 'Version'.<br />
        /// Version number of the assembly for the plug-in type.
        /// </summary>
		[AttributeLogicalName("version")]
		public string Version
		{
			get
			{
				var value = GetAttributeValue<string>("version");
			    return value;
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'WorkflowActivityGroupName'.<br />
        /// Group name of workflow custom activity.
        /// </summary>
		[AttributeLogicalName("workflowactivitygroupname")]
		public string WorkflowActivityGroupName
		{
			get
			{
				var value = GetAttributeValue<string>("workflowactivitygroupname");
			    return value;
			}
			set
			{
                SetAttributeValue("workflowactivitygroupname", value);
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'plugintype_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("plugintype_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfEventHandler
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("plugintype_sdkmessageprocessingstep", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("plugintype_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'plugintypeid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("plugintypeid_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfPlugInType
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("plugintypeid_sdkmessageprocessingstep", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("plugintypeid_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'createdby_plugintype'
		/// </summary>
		[RelationshipSchemaName("createdby_plugintype"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("createdby_plugintype", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("createdby_plugintype", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_plugintype_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_plugintype_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_plugintype_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_plugintype_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_plugintype_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_plugintype_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_plugintype_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_plugintype_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'modifiedby_plugintype'
		/// </summary>
		[RelationshipSchemaName("modifiedby_plugintype"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("modifiedby_plugintype", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("modifiedby_plugintype", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'pluginassembly_plugintype'
		/// </summary>
		[RelationshipSchemaName("pluginassembly_plugintype"), AttributeLogicalName("pluginassemblyid")]
		public PluginAssembly PluginAssemblyAsPluginAssembly
		{
			get => GetRelatedEntity<PluginAssembly>("pluginassembly_plugintype", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<PluginAssembly>("pluginassembly_plugintype", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName SdkMessageProcessingStepsOfEventHandler = new RelationName("SdkMessageProcessingStepsOfEventHandler");
			public static RelationName SdkMessageProcessingStepsOfPlugInType = new RelationName("SdkMessageProcessingStepsOfPlugInType");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName PluginAssemblyAsPluginAssembly = new RelationName("PluginAssemblyAsPluginAssembly");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageProcessingStepsOfEventHandler"] = new object[] { "SdkMessageProcessingStepsOfEventHandler", "sdkmessageprocessingstep", "plugintype", "eventhandler", "plugintypeid", "plugintypeid", "plugintypeid", "plugintype_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["SdkMessageProcessingStepsOfPlugInType"] = new object[] { "SdkMessageProcessingStepsOfPlugInType", "sdkmessageprocessingstep", "plugintype", "plugintypeid", "plugintypeid", "plugintypeid", "plugintypeid", "plugintypeid_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "plugintype", "systemuserid", "createdby", "plugintypeid", "plugintypeid", "createdby_plugintype", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "plugintype", "systemuserid", "createdonbehalfby", "plugintypeid", "plugintypeid", "lk_plugintype_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "plugintype", "systemuserid", "modifiedonbehalfby", "plugintypeid", "plugintypeid", "lk_plugintype_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "plugintype", "systemuserid", "modifiedby", "plugintypeid", "plugintypeid", "modifiedby_plugintype", typeof (User) };
			relationProperties["PluginAssemblyAsPluginAssembly"] = new object[] { "PluginAssemblyAsPluginAssembly", "pluginassembly", "plugintype", "pluginassemblyid", "pluginassemblyid", "plugintypeid", "plugintypeid", "pluginassembly_plugintype", typeof (PluginAssembly) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public PluginType(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["plugintypeid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum IsManagedEnum
		{
			Managed = 1,
			Unmanaged = 0,
		}
	
		public enum IsWorkflowActivityEnum
		{
			Yes = 1,
			No = 0,
		}
	
		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#region SdkMessage

	/// <summary>
	/// 'SdkMessage'.<br />
	/// Message that is supported by the SDK.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("sdkmessage")]
	public partial class SdkMessage : GeneratedEntity<SdkMessage.RelationName>
	{
		public SdkMessage() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessage(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessage(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Sdk Message";
		public const string SchemaName = "SdkMessage";
		public const string EntityLogicalName = "sdkmessage";
		public const int EntityTypeCode = 4606;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("sdkmessageid")]
		public override System.Guid Id
		{
			get => (SdkMessageIdId == null || SdkMessageIdId == Guid.Empty) ? base.Id : SdkMessageIdId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("sdkmessageid");
                    base.Id = value;
                } else {
				    SdkMessageIdId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AutoTransact'.<br />
        /// Information about whether the SDK message is automatically transacted.
        /// </summary>
		[AttributeLogicalName("autotransact")]
		public bool? AutoTransact
		{
			get
			{
				var value = GetAttributeValue<bool?>("autotransact");
			    return value;
			}
			set
			{
                SetAttributeValue("autotransact", value);
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'Availability'.<br />
        /// Identifies where a method will be exposed. 0 - Server, 1 - Client, 2 - both.
        /// </summary>
		[AttributeLogicalName("availability")]
		public int? Availability
		{
			get
			{
				var value = GetAttributeValue<int?>("availability");
			    return value;
			}
			set
			{
                SetAttributeValue("availability", value);
			}
		}

        /// <summary>
        /// [MaxLength=25] 
		/// 'CategoryName'.<br />
        /// If this is a categorized method, this is the name, otherwise None.
        /// </summary>
		[AttributeLogicalName("categoryname")]
		public string CategoryName
		{
			get
			{
				var value = GetAttributeValue<string>("categoryname");
			    return value;
			}
			set
			{
                SetAttributeValue("categoryname", value);
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public GlobalEnums.ComponentState? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				return (GlobalEnums.ComponentState?)value?.Value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the SDK message.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the SDK message was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the sdkmessage.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the SDK message.
        /// </summary>
		[AttributeLogicalName("customizationlevel")]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'Expand'.<br />
        /// Indicates whether the SDK message should have its requests expanded per primary entity defined in its filters.
        /// </summary>
		[AttributeLogicalName("expand")]
		public bool? Expand
		{
			get
			{
				var value = GetAttributeValue<bool?>("expand");
			    return value;
			}
			set
			{
                SetAttributeValue("expand", value);
			}
		}

        /// <summary>
        /// [MaxLength=48] 
		/// 'IntroducedVersion'.<br />
        /// Version in which the component is introduced.
        /// </summary>
		[AttributeLogicalName("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<string>("introducedversion");
			    return value;
			}
			set
			{
                SetAttributeValue("introducedversion", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsActive'.<br />
        /// Information about whether the SDK message is active.
        /// </summary>
		[AttributeLogicalName("isactive")]
		public bool? IsActive
		{
			get
			{
				var value = GetAttributeValue<bool?>("isactive");
			    return value;
			}
			set
			{
                SetAttributeValue("isactive", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsManaged'.<br />
        /// Information that specifies whether this component is managed.
        /// </summary>
		[AttributeLogicalName("ismanaged")]
		public bool? State
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'IsPrivate'.<br />
        /// Indicates whether the SDK message is private.
        /// </summary>
		[AttributeLogicalName("isprivate")]
		public bool? IsPrivate
		{
			get
			{
				var value = GetAttributeValue<bool?>("isprivate");
			    return value;
			}
			set
			{
                SetAttributeValue("isprivate", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsReadOnly'.<br />
        /// Identifies whether an SDK message will be ReadOnly or Read Write. false - ReadWrite, true - ReadOnly .
        /// </summary>
		[AttributeLogicalName("isreadonly")]
		public bool? Intent
		{
			get
			{
				var value = GetAttributeValue<bool?>("isreadonly");
			    return value;
			}
			set
			{
                SetAttributeValue("isreadonly", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsValidForExecuteAsync'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("isvalidforexecuteasync")]
		public bool? IsValidforExecuteAsync
		{
			get
			{
				var value = GetAttributeValue<bool?>("isvalidforexecuteasync");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the SDK message.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the SDK message was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the sdkmessage.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=256] 
		/// 'Name'.<br />
        /// Name of the SDK message.
        /// </summary>
		[AttributeLogicalName("name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
			    return value;
			}
			set
			{
                SetAttributeValue("name", value);
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the SDK message is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageId'.<br />
        /// Unique identifier of the SDK message entity.
        /// </summary>
		[AttributeLogicalName("sdkmessageid")]
		public Guid? SdkMessageIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("sdkmessageid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageIdUnique'.<br />
        /// Unique identifier of the SDK message.
        /// </summary>
		[AttributeLogicalName("sdkmessageidunique")]
		public Guid? SdkMessageIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageidunique");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'Template'.<br />
        /// Indicates whether the SDK message is a template.
        /// </summary>
		[AttributeLogicalName("template")]
		public bool? Template
		{
			get
			{
				var value = GetAttributeValue<bool?>("template");
			    return value;
			}
			set
			{
                SetAttributeValue("template", value);
			}
		}

        /// <summary>
        /// [MaxLength=512] 
		/// 'ThrottleSettings'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("throttlesettings")]
		public string ThrottleSettings
		{
			get
			{
				var value = GetAttributeValue<string>("throttlesettings");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Number that identifies a specific revision of the SDK message. 
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'WorkflowSdkStepEnabled'.<br />
        /// Whether or not the SDK message can be called from a workflow.
        /// </summary>
		[AttributeLogicalName("workflowsdkstepenabled")]
		public bool? WorkflowSdkStepEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("workflowsdkstepenabled");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'sdkmessageid_sdkmessagefilter'
		/// </summary>
		[RelationshipSchemaName("sdkmessageid_sdkmessagefilter")]
		public SdkMessageFilter[] SdkMessageFiltersOfSDKMessageID
		{
			get => GetRelatedEntities<SdkMessageFilter>("sdkmessageid_sdkmessagefilter", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("sdkmessageid_sdkmessagefilter", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'sdkmessageid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessageid_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfSDKMessage
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("sdkmessageid_sdkmessageprocessingstep", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("sdkmessageid_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'createdby_sdkmessage'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessage"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("createdby_sdkmessage", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("createdby_sdkmessage", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessage_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessage_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessage_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessage_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessage_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessage_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessage_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessage_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'modifiedby_sdkmessage'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessage"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("modifiedby_sdkmessage", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("modifiedby_sdkmessage", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName SdkMessageFiltersOfSDKMessageID = new RelationName("SdkMessageFiltersOfSDKMessageID");
			public static RelationName SdkMessageProcessingStepsOfSDKMessage = new RelationName("SdkMessageProcessingStepsOfSDKMessage");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageFiltersOfSDKMessageID"] = new object[] { "SdkMessageFiltersOfSDKMessageID", "sdkmessagefilter", "sdkmessage", "sdkmessageid", "sdkmessageid", "sdkmessageid", "sdkmessageid", "sdkmessageid_sdkmessagefilter", typeof (SdkMessageFilter[]) };
			relationProperties["SdkMessageProcessingStepsOfSDKMessage"] = new object[] { "SdkMessageProcessingStepsOfSDKMessage", "sdkmessageprocessingstep", "sdkmessage", "sdkmessageid", "sdkmessageid", "sdkmessageid", "sdkmessageid", "sdkmessageid_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "sdkmessage", "systemuserid", "createdby", "sdkmessageid", "sdkmessageid", "createdby_sdkmessage", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "sdkmessage", "systemuserid", "createdonbehalfby", "sdkmessageid", "sdkmessageid", "lk_sdkmessage_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "sdkmessage", "systemuserid", "modifiedonbehalfby", "sdkmessageid", "sdkmessageid", "lk_sdkmessage_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "sdkmessage", "systemuserid", "modifiedby", "sdkmessageid", "sdkmessageid", "modifiedby_sdkmessage", typeof (User) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public SdkMessage(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["sdkmessageid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum AutoTransactEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum ExpandEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum IsActiveEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum StateEnum
		{
			Managed = 1,
			Unmanaged = 0,
		}
	
		public enum IsPrivateEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum IntentEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum IsValidforExecuteAsyncEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum TemplateEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum WorkflowSdkStepEnabledEnum
		{
			Yes = 1,
			No = 0,
		}
	
		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#region SdkMessageFilter

	/// <summary>
	/// 'SdkMessageFilter'.<br />
	/// Filter that defines which SDK messages are valid for each type of entity.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("sdkmessagefilter")]
	public partial class SdkMessageFilter : GeneratedEntity<SdkMessageFilter.RelationName>
	{
		public SdkMessageFilter() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessageFilter(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessageFilter(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Sdk Message Filter";
		public const string SchemaName = "SdkMessageFilter";
		public const string EntityLogicalName = "sdkmessagefilter";
		public const int EntityTypeCode = 4607;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("sdkmessagefilterid")]
		public override System.Guid Id
		{
			get => (SdkMessageFilterIdId == null || SdkMessageFilterIdId == Guid.Empty) ? base.Id : SdkMessageFilterIdId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("sdkmessagefilterid");
                    base.Id = value;
                } else {
				    SdkMessageFilterIdId = value;
                }
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'Availability'.<br />
        /// Identifies where a method will be exposed. 0 - Server, 1 - Client, 2 - both.
        /// </summary>
		[AttributeLogicalName("availability")]
		public int? Availability
		{
			get
			{
				var value = GetAttributeValue<int?>("availability");
			    return value;
			}
			set
			{
                SetAttributeValue("availability", value);
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public GlobalEnums.ComponentState? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				return (GlobalEnums.ComponentState?)value?.Value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the SDK message filter.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the SDK message filter was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the sdkmessagefilter.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the SDK message filter.
        /// </summary>
		[AttributeLogicalName("customizationlevel")]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=48] 
		/// 'IntroducedVersion'.<br />
        /// Version in which the component is introduced.
        /// </summary>
		[AttributeLogicalName("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<string>("introducedversion");
			    return value;
			}
			set
			{
                SetAttributeValue("introducedversion", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomProcessingStepAllowed'.<br />
        /// Indicates whether a custom SDK message processing step is allowed.
        /// </summary>
		[AttributeLogicalName("iscustomprocessingstepallowed")]
		public bool? CustomProcessingStepAllowed
		{
			get
			{
				var value = GetAttributeValue<bool?>("iscustomprocessingstepallowed");
			    return value;
			}
			set
			{
                SetAttributeValue("iscustomprocessingstepallowed", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsManaged'.<br />
        /// Information that specifies whether this component is managed.
        /// </summary>
		[AttributeLogicalName("ismanaged")]
		public bool? State
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'IsVisible'.<br />
        /// Indicates whether the filter should be visible.
        /// </summary>
		[AttributeLogicalName("isvisible")]
		public bool? IsVisible
		{
			get
			{
				var value = GetAttributeValue<bool?>("isvisible");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the SDK message filter.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the SDK message filter was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the sdkmessagefilter.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the SDK message filter is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'PrimaryObjectTypeCode'.<br />
        /// Type of entity with which the SDK message filter is primarily associated.
        /// </summary>
		[AttributeLogicalName("primaryobjecttypecode")]
		public string PrimaryObjectTypeCode
		{
			get
			{
				var value = GetAttributeValue<string>("primaryobjecttypecode");
			    return value;
			}
		}

        /// <summary>
        /// [Range(0, 255)] 
		/// 'RestrictionLevel'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("restrictionlevel")]
		public int? RestrictionLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("restrictionlevel");
			    return value;
			}
			set
			{
                SetAttributeValue("restrictionlevel", value);
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageFilterId'.<br />
        /// Unique identifier of the SDK message filter entity.
        /// </summary>
		[AttributeLogicalName("sdkmessagefilterid")]
		public Guid? SdkMessageFilterIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessagefilterid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("sdkmessagefilterid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageFilterIdUnique'.<br />
        /// Unique identifier of the SDK message filter.
        /// </summary>
		[AttributeLogicalName("sdkmessagefilteridunique")]
		public Guid? SdkMessageFilterIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessagefilteridunique");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageId'.<br />
        /// Unique identifier of the related SDK message.
        /// </summary>
		[AttributeLogicalName("sdkmessageid")]
		public Guid? SDKMessageID
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("sdkmessageid", new EntityReference("sdkmessage", value.Value));
                else
	                SetAttributeValue("sdkmessageid", value);
			}
		}

        public string SDKMessageIDName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SecondaryObjectTypeCode'.<br />
        /// Type of entity with which the SDK message filter is secondarily associated.
        /// </summary>
		[AttributeLogicalName("secondaryobjecttypecode")]
		public string SecondaryObjectTypeCode
		{
			get
			{
				var value = GetAttributeValue<string>("secondaryobjecttypecode");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
			    return value;
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'WorkflowSdkStepEnabled'.<br />
        /// Whether or not the SDK message can be called from a workflow.
        /// </summary>
		[AttributeLogicalName("workflowsdkstepenabled")]
		public bool? WorkflowSdkStepEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("workflowsdkstepenabled");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'sdkmessagefilterid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessagefilterid_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfSdkMessageFilter
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("sdkmessagefilterid_sdkmessageprocessingstep", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("sdkmessagefilterid_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'createdby_sdkmessagefilter'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessagefilter"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("createdby_sdkmessagefilter", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("createdby_sdkmessagefilter", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessagefilter_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessagefilter_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessagefilter_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessagefilter_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessagefilter_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessagefilter_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessagefilter_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessagefilter_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'modifiedby_sdkmessagefilter'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessagefilter"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("modifiedby_sdkmessagefilter", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("modifiedby_sdkmessagefilter", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'sdkmessageid_sdkmessagefilter'
		/// </summary>
		[RelationshipSchemaName("sdkmessageid_sdkmessagefilter"), AttributeLogicalName("sdkmessageid")]
		public SdkMessage SdkMessageAsSDKMessageID
		{
			get => GetRelatedEntity<SdkMessage>("sdkmessageid_sdkmessagefilter", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SdkMessage>("sdkmessageid_sdkmessagefilter", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName SdkMessageProcessingStepsOfSdkMessageFilter = new RelationName("SdkMessageProcessingStepsOfSdkMessageFilter");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName SdkMessageAsSDKMessageID = new RelationName("SdkMessageAsSDKMessageID");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageProcessingStepsOfSdkMessageFilter"] = new object[] { "SdkMessageProcessingStepsOfSdkMessageFilter", "sdkmessageprocessingstep", "sdkmessagefilter", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessagefilterid_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "sdkmessagefilter", "systemuserid", "createdby", "sdkmessagefilterid", "sdkmessagefilterid", "createdby_sdkmessagefilter", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "sdkmessagefilter", "systemuserid", "createdonbehalfby", "sdkmessagefilterid", "sdkmessagefilterid", "lk_sdkmessagefilter_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "sdkmessagefilter", "systemuserid", "modifiedonbehalfby", "sdkmessagefilterid", "sdkmessagefilterid", "lk_sdkmessagefilter_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "sdkmessagefilter", "systemuserid", "modifiedby", "sdkmessagefilterid", "sdkmessagefilterid", "modifiedby_sdkmessagefilter", typeof (User) };
			relationProperties["SdkMessageAsSDKMessageID"] = new object[] { "SdkMessageAsSDKMessageID", "sdkmessage", "sdkmessagefilter", "sdkmessageid", "sdkmessageid", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessageid_sdkmessagefilter", typeof (SdkMessage) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public SdkMessageFilter(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["sdkmessagefilterid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum CustomProcessingStepAllowedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum StateEnum
		{
			Managed = 1,
			Unmanaged = 0,
		}
	
		public enum IsVisibleEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum PrimaryObjectTypeCodeEnum
		{
		}
	
		public enum SecondaryObjectTypeCodeEnum
		{
		}
	
		public enum WorkflowSdkStepEnabledEnum
		{
			Yes = 1,
			No = 0,
		}
	
		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#region SdkMessageProcessingStep

	/// <summary>
	/// 'SdkMessageProcessingStep'.<br />
	/// Stage in the execution pipeline that a plug-in is to execute.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("sdkmessageprocessingstep")]
	public partial class SdkMessageProcessingStep : GeneratedEntity<SdkMessageProcessingStep.RelationName>
	{
		public SdkMessageProcessingStep() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessageProcessingStep(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessageProcessingStep(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Sdk Message Processing Step";
		public const string SchemaName = "SdkMessageProcessingStep";
		public const string EntityLogicalName = "sdkmessageprocessingstep";
		public const int EntityTypeCode = 4608;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("sdkmessageprocessingstepid")]
		public override System.Guid Id
		{
			get => (SdkMessageProcessingStepIdId == null || SdkMessageProcessingStepIdId == Guid.Empty) ? base.Id : SdkMessageProcessingStepIdId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("sdkmessageprocessingstepid");
                    base.Id = value;
                } else {
				    SdkMessageProcessingStepIdId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AsyncAutoDelete'.<br />
        /// Indicates whether the asynchronous system job is automatically deleted on completion.
        /// </summary>
		[AttributeLogicalName("asyncautodelete")]
		public bool? AsynchronousAutomaticDelete
		{
			get
			{
				var value = GetAttributeValue<bool?>("asyncautodelete");
			    return value;
			}
			set
			{
                SetAttributeValue("asyncautodelete", value);
			}
		}

        /// <summary>
        ///  
		/// 'CanUseReadOnlyConnection'.<br />
        /// Identifies whether a SDK Message Processing Step type will be ReadOnly or Read Write. false - ReadWrite, true - ReadOnly 
        /// </summary>
		[AttributeLogicalName("canusereadonlyconnection")]
		public bool? Intent
		{
			get
			{
				var value = GetAttributeValue<bool?>("canusereadonlyconnection");
			    return value;
			}
			set
			{
                SetAttributeValue("canusereadonlyconnection", value);
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public GlobalEnums.ComponentState? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				return (GlobalEnums.ComponentState?)value?.Value;
			}
		}

        /// <summary>
        /// [MaxLength=1073741823] 
		/// 'Configuration'.<br />
        /// Step-specific configuration for the plug-in type. Passed to the plug-in constructor at run time.
        /// </summary>
		[AttributeLogicalName("configuration")]
		public string Configuration
		{
			get
			{
				var value = GetAttributeValue<string>("configuration");
			    return value;
			}
			set
			{
                SetAttributeValue("configuration", value);
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the SDK message processing step was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the sdkmessageprocessingstep.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("customizationlevel")]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'Description'.<br />
        /// Description of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("description")]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
			    return value;
			}
			set
			{
                SetAttributeValue("description", value);
			}
		}

        /// <summary>
        /// [MaxLength=1073741823] 
		/// 'EventExpander'.<br />
        /// Configuration for sending pipeline events to the Event Expander service.
        /// </summary>
		[AttributeLogicalName("eventexpander")]
		public string EventExpander
		{
			get
			{
				var value = GetAttributeValue<string>("eventexpander");
			    return value;
			}
			set
			{
                SetAttributeValue("eventexpander", value);
			}
		}

        /// <summary>
        ///  
		/// 'EventHandler'.<br />
        /// Unique identifier of the associated event handler.
        /// </summary>
		[AttributeLogicalName("eventhandler")]
		public EntityReference EventHandler
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("eventhandler");
			    return value;
			}
			set
			{
                SetAttributeValue("eventhandler", value);
			}
		}

        public string EventHandlerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("eventhandler");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=100000] 
		/// 'FilteringAttributes'.<br />
        /// Comma-separated list of attributes. If at least one of these attributes is modified, the plug-in should execute.
        /// </summary>
		[AttributeLogicalName("filteringattributes")]
		public string FilteringAttributes
		{
			get
			{
				var value = GetAttributeValue<string>("filteringattributes");
			    return value;
			}
			set
			{
                SetAttributeValue("filteringattributes", value);
			}
		}

        /// <summary>
        ///  
		/// 'ImpersonatingUserId'.<br />
        /// Unique identifier of the user to impersonate context when step is executed.
        /// </summary>
		[AttributeLogicalName("impersonatinguserid")]
		public Guid? ImpersonatingUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("impersonatinguserid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("impersonatinguserid", new EntityReference("systemuser", value.Value));
                else
	                SetAttributeValue("impersonatinguserid", value);
			}
		}

        public string ImpersonatingUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("impersonatinguserid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=48] 
		/// 'IntroducedVersion'.<br />
        /// Version in which the form is introduced.
        /// </summary>
		[AttributeLogicalName("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<string>("introducedversion");
			    return value;
			}
			set
			{
                SetAttributeValue("introducedversion", value);
			}
		}

        /// <summary>
        ///  
		/// 'InvocationSource'.<br />
        /// Identifies if a plug-in should be executed from a parent pipeline, a child pipeline, or both.
        /// </summary>
		[AttributeLogicalName("invocationsource")]
		[Obsolete]
		public InvocationSourceEnum? InvocationSource
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("invocationsource");
				return (InvocationSourceEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("invocationsource", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("invocationsource", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomizable'.<br />
        /// Information that specifies whether this component can be customized.
        /// </summary>
		[AttributeLogicalName("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			    return value;
			}
			set
			{
                SetAttributeValue("iscustomizable", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsHidden'.<br />
        /// Information that specifies whether this component should be hidden.
        /// </summary>
		[AttributeLogicalName("ishidden")]
		public BooleanManagedProperty Hidden
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("ishidden");
			    return value;
			}
			set
			{
                SetAttributeValue("ishidden", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsManaged'.<br />
        /// Information that specifies whether this component is managed.
        /// </summary>
		[AttributeLogicalName("ismanaged")]
		public bool? State
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'Mode'.<br />
        /// Run-time mode of execution, for example, synchronous or asynchronous.
        /// </summary>
		[AttributeLogicalName("mode")]
		public ExecutionModeEnum? ExecutionMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("mode");
				return (ExecutionModeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("mode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("mode", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the SDK message processing step was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the sdkmessageprocessingstep.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=256] 
		/// 'Name'.<br />
        /// Name of SdkMessage processing step.
        /// </summary>
		[AttributeLogicalName("name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
			    return value;
			}
			set
			{
                SetAttributeValue("name", value);
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the SDK message processing step is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'PluginTypeId'.<br />
        /// Unique identifier of the plug-in type associated with the step.
        /// </summary>
		[AttributeLogicalName("plugintypeid")]
		[Obsolete]
		public Guid? PlugInType
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("plugintypeid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("plugintypeid", new EntityReference("sdkmessagefilter", value.Value));
                else
	                SetAttributeValue("plugintypeid", value);
			}
		}

        public string PlugInTypeName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("plugintypeid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'Rank'.<br />
        /// Processing order within the stage.
        /// </summary>
		[AttributeLogicalName("rank")]
		public int? ExecutionOrder
		{
			get
			{
				var value = GetAttributeValue<int?>("rank");
			    return value;
			}
			set
			{
                SetAttributeValue("rank", value);
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageFilterId'.<br />
        /// Unique identifier of the SDK message filter.
        /// </summary>
		[AttributeLogicalName("sdkmessagefilterid")]
		public Guid? SdkMessageFilter
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessagefilterid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("sdkmessagefilterid", new EntityReference("sdkmessagefilter", value.Value));
                else
	                SetAttributeValue("sdkmessagefilterid", value);
			}
		}

        public string SdkMessageFilterName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessagefilterid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SdkMessageId'.<br />
        /// Unique identifier of the SDK message.
        /// </summary>
		[AttributeLogicalName("sdkmessageid")]
		public Guid? SDKMessage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("sdkmessageid", new EntityReference("sdkmessage", value.Value));
                else
	                SetAttributeValue("sdkmessageid", value);
			}
		}

        public string SDKMessageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepId'.<br />
        /// Unique identifier of the SDK message processing step entity.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepid")]
		public Guid? SdkMessageProcessingStepIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("sdkmessageprocessingstepid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepIdUnique'.<br />
        /// Unique identifier of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepidunique")]
		public Guid? SdkMessageProcessingStepIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepidunique");
			    return value;
			}
		}

        /// <summary>
        /// [Required] 
		/// 'SdkMessageProcessingStepSecureConfigId'.<br />
        /// Unique identifier of the Sdk message processing step secure configuration.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepsecureconfigid")]
		public Guid? SDKMessageProcessingStepSecureConfiguration
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessageprocessingstepsecureconfigid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("sdkmessageprocessingstepsecureconfigid", new EntityReference("sdkmessageprocessingstepsecureconfig", value.Value));
                else
	                SetAttributeValue("sdkmessageprocessingstepsecureconfigid", value);
			}
		}

        public string SDKMessageProcessingStepSecureConfigurationName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessageprocessingstepsecureconfigid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'Stage'.<br />
        /// Stage in the execution pipeline that the SDK message processing step is in.
        /// </summary>
		[AttributeLogicalName("stage")]
		public ExecutionStageEnum? ExecutionStage
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("stage");
				return (ExecutionStageEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("stage", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("stage", value);
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Status of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				return (StatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Reason for the status of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				return (StatusReasonEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statuscode", value);
			}
		}

        /// <summary>
        ///  
		/// 'SupportedDeployment'.<br />
        /// Deployment that the SDK message processing step should be executed on; server, client, or both.
        /// </summary>
		[AttributeLogicalName("supporteddeployment")]
		public DeploymentEnum? Deployment
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("supporteddeployment");
				return (DeploymentEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("supporteddeployment", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("supporteddeployment", value);
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Number that identifies a specific revision of the SDK message processing step. 
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'sdkmessageprocessingstepid_sdkmessageprocessingstepimage'
		/// </summary>
		[RelationshipSchemaName("sdkmessageprocessingstepid_sdkmessageprocessingstepimage")]
		public SdkMessageProcessingStepImage[] SdkMessageProcessingStepImagesOfSDKMessageProcessingStep
		{
			get => GetRelatedEntities<SdkMessageProcessingStepImage>("sdkmessageprocessingstepid_sdkmessageprocessingstepimage", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("sdkmessageprocessingstepid_sdkmessageprocessingstepimage", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'createdby_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessageprocessingstep"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("createdby_sdkmessageprocessingstep", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("createdby_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'impersonatinguserid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("impersonatinguserid_sdkmessageprocessingstep"), AttributeLogicalName("impersonatinguserid")]
		public User UserAsImpersonatingUser
		{
			get => GetRelatedEntity<User>("impersonatinguserid_sdkmessageprocessingstep", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("impersonatinguserid_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessageprocessingstep_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstep_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessageprocessingstep_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessageprocessingstep_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessageprocessingstep_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstep_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessageprocessingstep_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessageprocessingstep_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'modifiedby_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessageprocessingstep"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("modifiedby_sdkmessageprocessingstep", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("modifiedby_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'plugintype_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("plugintype_sdkmessageprocessingstep"), AttributeLogicalName("eventhandler")]
		public PluginType PluginTypeAsEventHandler
		{
			get => GetRelatedEntity<PluginType>("plugintype_sdkmessageprocessingstep", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<PluginType>("plugintype_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'plugintypeid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("plugintypeid_sdkmessageprocessingstep"), AttributeLogicalName("plugintypeid")]
		public PluginType PluginTypeAsPlugInType
		{
			get => GetRelatedEntity<PluginType>("plugintypeid_sdkmessageprocessingstep", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<PluginType>("plugintypeid_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'sdkmessagefilterid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessagefilterid_sdkmessageprocessingstep"), AttributeLogicalName("sdkmessagefilterid")]
		public SdkMessageFilter SdkMessageFilterAsSdkMessageFilter
		{
			get => GetRelatedEntity<SdkMessageFilter>("sdkmessagefilterid_sdkmessageprocessingstep", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SdkMessageFilter>("sdkmessagefilterid_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'sdkmessageid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessageid_sdkmessageprocessingstep"), AttributeLogicalName("sdkmessageid")]
		public SdkMessage SdkMessageAsSDKMessage
		{
			get => GetRelatedEntity<SdkMessage>("sdkmessageid_sdkmessageprocessingstep", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SdkMessage>("sdkmessageid_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep"), AttributeLogicalName("sdkmessageprocessingstepsecureconfigid")]
		public SdkMessageProcessingStepSecureConfiguration SdkMessageProcessingStepSecureConfigurationAsSDKMessageProcessingStepSecureConfiguration
		{
			get => GetRelatedEntity<SdkMessageProcessingStepSecureConfiguration>("sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SdkMessageProcessingStepSecureConfiguration>("sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName SdkMessageProcessingStepImagesOfSDKMessageProcessingStep = new RelationName("SdkMessageProcessingStepImagesOfSDKMessageProcessingStep");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsImpersonatingUser = new RelationName("UserAsImpersonatingUser");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName PluginTypeAsEventHandler = new RelationName("PluginTypeAsEventHandler");
			public static RelationName PluginTypeAsPlugInType = new RelationName("PluginTypeAsPlugInType");
			public static RelationName SdkMessageFilterAsSdkMessageFilter = new RelationName("SdkMessageFilterAsSdkMessageFilter");
			public static RelationName SdkMessageAsSDKMessage = new RelationName("SdkMessageAsSDKMessage");
			public static RelationName SdkMessageProcessingStepSecureConfigurationAsSDKMessageProcessingStepSecureConfiguration = new RelationName("SdkMessageProcessingStepSecureConfigurationAsSDKMessageProcessingStepSecureConfiguration");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageProcessingStepImagesOfSDKMessageProcessingStep"] = new object[] { "SdkMessageProcessingStepImagesOfSDKMessageProcessingStep", "sdkmessageprocessingstepimage", "sdkmessageprocessingstep", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid_sdkmessageprocessingstepimage", typeof (SdkMessageProcessingStepImage[]) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "sdkmessageprocessingstep", "systemuserid", "createdby", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "createdby_sdkmessageprocessingstep", typeof (User) };
			relationProperties["UserAsImpersonatingUser"] = new object[] { "UserAsImpersonatingUser", "systemuser", "sdkmessageprocessingstep", "systemuserid", "impersonatinguserid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "impersonatinguserid_sdkmessageprocessingstep", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "sdkmessageprocessingstep", "systemuserid", "createdonbehalfby", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "lk_sdkmessageprocessingstep_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "sdkmessageprocessingstep", "systemuserid", "modifiedonbehalfby", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "lk_sdkmessageprocessingstep_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "sdkmessageprocessingstep", "systemuserid", "modifiedby", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "modifiedby_sdkmessageprocessingstep", typeof (User) };
			relationProperties["PluginTypeAsEventHandler"] = new object[] { "PluginTypeAsEventHandler", "plugintype", "sdkmessageprocessingstep", "plugintypeid", "eventhandler", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "plugintype_sdkmessageprocessingstep", typeof (PluginType) };
			relationProperties["PluginTypeAsPlugInType"] = new object[] { "PluginTypeAsPlugInType", "plugintype", "sdkmessageprocessingstep", "plugintypeid", "plugintypeid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "plugintypeid_sdkmessageprocessingstep", typeof (PluginType) };
			relationProperties["SdkMessageFilterAsSdkMessageFilter"] = new object[] { "SdkMessageFilterAsSdkMessageFilter", "sdkmessagefilter", "sdkmessageprocessingstep", "sdkmessagefilterid", "sdkmessagefilterid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessagefilterid_sdkmessageprocessingstep", typeof (SdkMessageFilter) };
			relationProperties["SdkMessageAsSDKMessage"] = new object[] { "SdkMessageAsSDKMessage", "sdkmessage", "sdkmessageprocessingstep", "sdkmessageid", "sdkmessageid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageid_sdkmessageprocessingstep", typeof (SdkMessage) };
			relationProperties["SdkMessageProcessingStepSecureConfigurationAsSDKMessageProcessingStepSecureConfiguration"] = new object[] { "SdkMessageProcessingStepSecureConfigurationAsSDKMessageProcessingStepSecureConfiguration", "sdkmessageprocessingstepsecureconfig", "sdkmessageprocessingstep", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep", typeof (SdkMessageProcessingStepSecureConfiguration) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public SdkMessageProcessingStep(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["sdkmessageprocessingstepid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum AsynchronousAutomaticDeleteEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum IntentEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum InvocationSourceEnum
		{
			Internal = -1,
			Parent = 0,
			Child = 1,
		}
	
		public enum StateEnum
		{
			Managed = 1,
			Unmanaged = 0,
		}
	
		public enum ExecutionModeEnum
		{
			Synchronous = 0,
			Asynchronous = 1,
		}
	
		public enum ExecutionStageEnum
		{
			InitialPreoperationForinternaluseonly = 5,
			Prevalidation = 10,
			InternalPreoperationBeforeExternalPluginsForinternaluseonly = 15,
			Preoperation = 20,
			InternalPreoperationAfterExternalPluginsForinternaluseonly = 25,
			MainOperationForinternaluseonly = 30,
			InternalPostoperationBeforeExternalPluginsForinternaluseonly = 35,
			Postoperation = 40,
			InternalPostoperationAfterExternalPluginsForinternaluseonly = 45,
			PostoperationDeprecated = 50,
			FinalPostoperationForinternaluseonly = 55,
		}
	
		public enum StatusEnum
		{
			Enabled = 0,
			Disabled = 1,
		}
	
		public enum StatusReasonEnum
		{
			Enabled = 1,
			Disabled = 2,
		}
	
		public enum DeploymentEnum
		{
			ServerOnly = 0,
			MicrosoftDynamics365ClientforOutlookOnly = 1,
			Both = 2,
		}
	
		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#region SdkMessageProcessingStepImage

	/// <summary>
	/// 'SdkMessageProcessingStepImage'.<br />
	/// Copy of an entity's attributes before or after the core system operation.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("sdkmessageprocessingstepimage")]
	public partial class SdkMessageProcessingStepImage : GeneratedEntity<SdkMessageProcessingStepImage.RelationName>
	{
		public SdkMessageProcessingStepImage() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessageProcessingStepImage(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessageProcessingStepImage(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Sdk Message Processing Step Image";
		public const string SchemaName = "SdkMessageProcessingStepImage";
		public const string EntityLogicalName = "sdkmessageprocessingstepimage";
		public const int EntityTypeCode = 4615;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("sdkmessageprocessingstepimageid")]
		public override System.Guid Id
		{
			get => (SdkMessageProcessingStepImageIdId == null || SdkMessageProcessingStepImageIdId == Guid.Empty) ? base.Id : SdkMessageProcessingStepImageIdId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("sdkmessageprocessingstepimageid");
                    base.Id = value;
                } else {
				    SdkMessageProcessingStepImageIdId = value;
                }
			}
		}

        /// <summary>
        /// [MaxLength=100000] 
		/// 'Attributes'.<br />
        /// Comma-separated list of attributes that are to be passed into the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("attributes")]
		public string Attributes_Attributes1
		{
			get
			{
				var value = GetAttributeValue<string>("attributes");
			    return value;
			}
			set
			{
                SetAttributeValue("attributes", value);
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public GlobalEnums.ComponentState? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				return (GlobalEnums.ComponentState?)value?.Value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the SDK message processing step image was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the sdkmessageprocessingstepimage.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("customizationlevel")]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'Description'.<br />
        /// Description of the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("description")]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
			    return value;
			}
			set
			{
                SetAttributeValue("description", value);
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'EntityAlias'.<br />
        /// Key name used to access the pre-image or post-image property bags in a step.
        /// </summary>
		[AttributeLogicalName("entityalias")]
		public string EntityAlias
		{
			get
			{
				var value = GetAttributeValue<string>("entityalias");
			    return value;
			}
			set
			{
                SetAttributeValue("entityalias", value);
			}
		}

        /// <summary>
        ///  
		/// 'ImageType'.<br />
        /// Type of image requested.
        /// </summary>
		[AttributeLogicalName("imagetype")]
		public ImageTypeEnum? ImageType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("imagetype");
				return (ImageTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("imagetype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("imagetype", value);
			}
		}

        /// <summary>
        /// [MaxLength=48] 
		/// 'IntroducedVersion'.<br />
        /// Version in which the form is introduced.
        /// </summary>
		[AttributeLogicalName("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<string>("introducedversion");
			    return value;
			}
			set
			{
                SetAttributeValue("introducedversion", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomizable'.<br />
        /// Information that specifies whether this component can be customized.
        /// </summary>
		[AttributeLogicalName("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			    return value;
			}
			set
			{
                SetAttributeValue("iscustomizable", value);
			}
		}

		[AttributeLogicalName("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'MessagePropertyName'.<br />
        /// Name of the property on the Request message.
        /// </summary>
		[AttributeLogicalName("messagepropertyname")]
		public string MessagePropertyName
		{
			get
			{
				var value = GetAttributeValue<string>("messagepropertyname");
			    return value;
			}
			set
			{
                SetAttributeValue("messagepropertyname", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy_ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedBy_ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the SDK message processing step was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedBy_ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the sdkmessageprocessingstepimage.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=256] 
		/// 'Name'.<br />
        /// Name of SdkMessage processing step image.
        /// </summary>
		[AttributeLogicalName("name")]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("name");
			    return value;
			}
			set
			{
                SetAttributeValue("name", value);
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the SDK message processing step is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'RelatedAttributeName'.<br />
        /// Name of the related entity.
        /// </summary>
		[AttributeLogicalName("relatedattributename")]
		public string RelatedAttributeName
		{
			get
			{
				var value = GetAttributeValue<string>("relatedattributename");
			    return value;
			}
			set
			{
                SetAttributeValue("relatedattributename", value);
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepId'.<br />
        /// Unique identifier of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepid")]
		public Guid? SDKMessageProcessingStep
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessageprocessingstepid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("sdkmessageprocessingstepid", new EntityReference("sdkmessageprocessingstep", value.Value));
                else
	                SetAttributeValue("sdkmessageprocessingstepid", value);
			}
		}

        public string SDKMessageProcessingStepName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessageprocessingstepid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepImageId'.<br />
        /// Unique identifier of the SDK message processing step image entity.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepimageid")]
		public Guid? SdkMessageProcessingStepImageIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepimageid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("sdkmessageprocessingstepimageid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepImageIdUnique'.<br />
        /// Unique identifier of the SDK message processing step image.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepimageidunique")]
		public Guid? SdkMessageProcessingStepImageIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepimageidunique");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Number that identifies a specific revision of the step image. 
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'createdby_sdkmessageprocessingstepimage'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessageprocessingstepimage"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("createdby_sdkmessageprocessingstepimage", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("createdby_sdkmessageprocessingstepimage", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessageprocessingstepimage_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstepimage_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessageprocessingstepimage_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessageprocessingstepimage_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessageprocessingstepimage_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstepimage_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessageprocessingstepimage_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessageprocessingstepimage_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'modifiedby_sdkmessageprocessingstepimage'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessageprocessingstepimage"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("modifiedby_sdkmessageprocessingstepimage", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("modifiedby_sdkmessageprocessingstepimage", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'sdkmessageprocessingstepid_sdkmessageprocessingstepimage'
		/// </summary>
		[RelationshipSchemaName("sdkmessageprocessingstepid_sdkmessageprocessingstepimage"), AttributeLogicalName("sdkmessageprocessingstepid")]
		public SdkMessageProcessingStep SdkMessageProcessingStepAsSDKMessageProcessingStep
		{
			get => GetRelatedEntity<SdkMessageProcessingStep>("sdkmessageprocessingstepid_sdkmessageprocessingstepimage", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<SdkMessageProcessingStep>("sdkmessageprocessingstepid_sdkmessageprocessingstepimage", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName SdkMessageProcessingStepAsSDKMessageProcessingStep = new RelationName("SdkMessageProcessingStepAsSDKMessageProcessingStep");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "sdkmessageprocessingstepimage", "systemuserid", "createdby", "sdkmessageprocessingstepimageid", "sdkmessageprocessingstepimageid", "createdby_sdkmessageprocessingstepimage", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "sdkmessageprocessingstepimage", "systemuserid", "createdonbehalfby", "sdkmessageprocessingstepimageid", "sdkmessageprocessingstepimageid", "lk_sdkmessageprocessingstepimage_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "sdkmessageprocessingstepimage", "systemuserid", "modifiedonbehalfby", "sdkmessageprocessingstepimageid", "sdkmessageprocessingstepimageid", "lk_sdkmessageprocessingstepimage_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "sdkmessageprocessingstepimage", "systemuserid", "modifiedby", "sdkmessageprocessingstepimageid", "sdkmessageprocessingstepimageid", "modifiedby_sdkmessageprocessingstepimage", typeof (User) };
			relationProperties["SdkMessageProcessingStepAsSDKMessageProcessingStep"] = new object[] { "SdkMessageProcessingStepAsSDKMessageProcessingStep", "sdkmessageprocessingstep", "sdkmessageprocessingstepimage", "sdkmessageprocessingstepid", "sdkmessageprocessingstepid", "sdkmessageprocessingstepimageid", "sdkmessageprocessingstepimageid", "sdkmessageprocessingstepid_sdkmessageprocessingstepimage", typeof (SdkMessageProcessingStep) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public SdkMessageProcessingStepImage(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["sdkmessageprocessingstepimageid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum ImageTypeEnum
		{
			PreImage = 0,
			PostImage = 1,
			Both = 2,
		}
	
		public enum IsManagedEnum
		{
			Managed = 1,
			Unmanaged = 0,
		}
	
		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#region SdkMessageProcessingStepSecureConfiguration

	/// <summary>
	/// 'SdkMessageProcessingStepSecureConfig'.<br />
	/// Non-public custom configuration that is passed to a plug-in's constructor.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("sdkmessageprocessingstepsecureconfig")]
	public partial class SdkMessageProcessingStepSecureConfiguration : GeneratedEntity<SdkMessageProcessingStepSecureConfiguration.RelationName>
	{
		public SdkMessageProcessingStepSecureConfiguration() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessageProcessingStepSecureConfiguration(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public SdkMessageProcessingStepSecureConfiguration(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Sdk Message Processing Step Secure Configuration";
		public const string SchemaName = "SdkMessageProcessingStepSecureConfig";
		public const string EntityLogicalName = "sdkmessageprocessingstepsecureconfig";
		public const int EntityTypeCode = 4616;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("sdkmessageprocessingstepsecureconfigid")]
		public override System.Guid Id
		{
			get => (SdkMessageProcessingStepSecureConfigIdId == null || SdkMessageProcessingStepSecureConfigIdId == Guid.Empty) ? base.Id : SdkMessageProcessingStepSecureConfigIdId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("sdkmessageprocessingstepsecureconfigid");
                    base.Id = value;
                } else {
				    SdkMessageProcessingStepSecureConfigIdId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the SDK message processing step was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the sdkmessageprocessingstepsecureconfig.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-255, 255)] 
		/// 'CustomizationLevel'.<br />
        /// Customization level of the SDK message processing step secure configuration.
        /// </summary>
		[AttributeLogicalName("customizationlevel")]
		public int? CustomizationLevel
		{
			get
			{
				var value = GetAttributeValue<int?>("customizationlevel");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the SDK message processing step was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the sdkmessageprocessingstepsecureconfig.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization with which the SDK message processing step is associated.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? OrganizationId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Id;
			}
		}

        public string OrganizationIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("organizationid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepSecureConfigId'.<br />
        /// Unique identifier of the SDK message processing step secure configuration.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepsecureconfigid")]
		public Guid? SdkMessageProcessingStepSecureConfigIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepsecureconfigid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("sdkmessageprocessingstepsecureconfigid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageProcessingStepSecureConfigIdUnique'.<br />
        /// Unique identifier of the SDK message processing step.
        /// </summary>
		[AttributeLogicalName("sdkmessageprocessingstepsecureconfigidunique")]
		public Guid? SdkMessageProcessingStepSecureConfigIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("sdkmessageprocessingstepsecureconfigidunique");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=1073741823] 
		/// 'SecureConfig'.<br />
        /// Secure step-specific configuration for the plug-in type that is passed to the plug-in's constructor at run time.
        /// </summary>
		[AttributeLogicalName("secureconfig")]
		public string SecureConfiguration
		{
			get
			{
				var value = GetAttributeValue<string>("secureconfig");
			    return value;
			}
			set
			{
                SetAttributeValue("secureconfig", value);
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfSDKMessageProcessingStepSecureConfiguration
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'createdby_sdkmessageprocessingstepsecureconfig'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessageprocessingstepsecureconfig"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("createdby_sdkmessageprocessingstepsecureconfig", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("createdby_sdkmessageprocessingstepsecureconfig", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'modifiedby_sdkmessageprocessingstepsecureconfig'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessageprocessingstepsecureconfig"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("modifiedby_sdkmessageprocessingstepsecureconfig", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("modifiedby_sdkmessageprocessingstepsecureconfig", null, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName SdkMessageProcessingStepsOfSDKMessageProcessingStepSecureConfiguration = new RelationName("SdkMessageProcessingStepsOfSDKMessageProcessingStepSecureConfiguration");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["SdkMessageProcessingStepsOfSDKMessageProcessingStepSecureConfiguration"] = new object[] { "SdkMessageProcessingStepsOfSDKMessageProcessingStepSecureConfiguration", "sdkmessageprocessingstep", "sdkmessageprocessingstepsecureconfig", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "sdkmessageprocessingstepsecureconfig", "systemuserid", "createdby", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepsecureconfigid", "createdby_sdkmessageprocessingstepsecureconfig", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "sdkmessageprocessingstepsecureconfig", "systemuserid", "createdonbehalfby", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepsecureconfigid", "lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "sdkmessageprocessingstepsecureconfig", "systemuserid", "modifiedonbehalfby", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepsecureconfigid", "lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "sdkmessageprocessingstepsecureconfig", "systemuserid", "modifiedby", "sdkmessageprocessingstepsecureconfigid", "sdkmessageprocessingstepsecureconfigid", "modifiedby_sdkmessageprocessingstepsecureconfig", typeof (User) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public SdkMessageProcessingStepSecureConfiguration(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["sdkmessageprocessingstepsecureconfigid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#region User

	/// <summary>
	/// 'SystemUser'.<br />
	/// Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("systemuser")]
	public partial class User : GeneratedEntity<User.RelationName>
	{
		public User() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public User(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public User(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "User";
		public const string SchemaName = "SystemUser";
		public const string EntityLogicalName = "systemuser";
		public const int EntityTypeCode = 8;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("systemuserid")]
		public override System.Guid Id
		{
			get => (UserId == null || UserId == Guid.Empty) ? base.Id : UserId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("systemuserid");
                    base.Id = value;
                } else {
				    UserId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccessMode'.<br />
        /// Type of user.
        /// </summary>
		[AttributeLogicalName("accessmode")]
		public AccessModeEnum? AccessMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("accessmode");
				return (AccessModeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("accessmode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("accessmode", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressId'.<br />
        /// Unique identifier for address 1.
        /// </summary>
		[AttributeLogicalName("address1_addressid")]
		public Guid? Address1ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address1_addressid");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_addressid", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressTypeCode'.<br />
        /// Type of address for address 1, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address1_addresstypecode")]
		public Address1AddressTypeEnum? Address1AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_addresstypecode");
				return (Address1AddressTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("address1_addresstypecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("address1_addresstypecode", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address1_City'.<br />
        /// City name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_city")]
		public string City
		{
			get
			{
				var value = GetAttributeValue<string>("address1_city");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_city", value);
			}
		}

        /// <summary>
        /// [MaxLength=1000] 
		/// 'Address1_Composite'.<br />
        /// Shows the complete primary address.
        /// </summary>
		[AttributeLogicalName("address1_composite")]
		public string Address
		{
			get
			{
				var value = GetAttributeValue<string>("address1_composite");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address1_Country'.<br />
        /// Country/region name in address 1.
        /// </summary>
		[AttributeLogicalName("address1_country")]
		public string CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address1_country");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_country", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address1_County'.<br />
        /// County name for address 1.
        /// </summary>
		[AttributeLogicalName("address1_county")]
		public string Address1County
		{
			get
			{
				var value = GetAttributeValue<string>("address1_county");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_county", value);
			}
		}

        /// <summary>
        /// [MaxLength=64] 
		/// 'Address1_Fax'.<br />
        /// Fax number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_fax")]
		public string Address1Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address1_fax");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_fax", value);
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address1_Latitude'.<br />
        /// Latitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_latitude")]
		public double? Address1Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_latitude");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_latitude", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address1_Line1'.<br />
        /// First line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line1")]
		public string Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line1");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_line1", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address1_Line2'.<br />
        /// Second line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line2")]
		public string Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line2");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_line2", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address1_Line3'.<br />
        /// Third line for entering address 1 information.
        /// </summary>
		[AttributeLogicalName("address1_line3")]
		public string Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line3");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_line3", value);
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address1_Longitude'.<br />
        /// Longitude for address 1.
        /// </summary>
		[AttributeLogicalName("address1_longitude")]
		public double? Address1Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_longitude");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_longitude", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'Address1_Name'.<br />
        /// Name to enter for address 1.
        /// </summary>
		[AttributeLogicalName("address1_name")]
		public string Address1Name
		{
			get
			{
				var value = GetAttributeValue<string>("address1_name");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_name", value);
			}
		}

        /// <summary>
        /// [MaxLength=40] 
		/// 'Address1_PostalCode'.<br />
        /// ZIP Code or postal code for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postalcode")]
		public string ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postalcode");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_postalcode", value);
			}
		}

        /// <summary>
        /// [MaxLength=40] 
		/// 'Address1_PostOfficeBox'.<br />
        /// Post office box number for address 1.
        /// </summary>
		[AttributeLogicalName("address1_postofficebox")]
		public string Address1PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postofficebox");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_postofficebox", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address1_ShippingMethodCode'.<br />
        /// Method of shipment for address 1.
        /// </summary>
		[AttributeLogicalName("address1_shippingmethodcode")]
		public Address1ShippingMethodEnum? Address1ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_shippingmethodcode");
				return (Address1ShippingMethodEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("address1_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("address1_shippingmethodcode", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address1_StateOrProvince'.<br />
        /// State or province for address 1.
        /// </summary>
		[AttributeLogicalName("address1_stateorprovince")]
		public string StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address1_stateorprovince");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_stateorprovince", value);
			}
		}

        /// <summary>
        /// [MaxLength=64] 
		/// 'Address1_Telephone1'.<br />
        /// First telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone1")]
		public string MainPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone1");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_telephone1", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address1_Telephone2'.<br />
        /// Second telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone2")]
		public string OtherPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone2");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_telephone2", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address1_Telephone3'.<br />
        /// Third telephone number associated with address 1.
        /// </summary>
		[AttributeLogicalName("address1_telephone3")]
		public string Pager
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone3");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_telephone3", value);
			}
		}

        /// <summary>
        /// [MaxLength=4] 
		/// 'Address1_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 1.
        /// </summary>
		[AttributeLogicalName("address1_upszone")]
		public string Address1UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_upszone");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_upszone", value);
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address1_UTCOffset'.<br />
        /// UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address1_utcoffset")]
		public int? Address1UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address1_utcoffset");
			    return value;
			}
			set
			{
                SetAttributeValue("address1_utcoffset", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressId'.<br />
        /// Unique identifier for address 2.
        /// </summary>
		[AttributeLogicalName("address2_addressid")]
		public Guid? Address2ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address2_addressid");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_addressid", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressTypeCode'.<br />
        /// Type of address for address 2, such as billing, shipping, or primary address.
        /// </summary>
		[AttributeLogicalName("address2_addresstypecode")]
		public Address2AddressTypeEnum? Address2AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_addresstypecode");
				return (Address2AddressTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("address2_addresstypecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("address2_addresstypecode", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address2_City'.<br />
        /// City name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_city")]
		public string OtherCity
		{
			get
			{
				var value = GetAttributeValue<string>("address2_city");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_city", value);
			}
		}

        /// <summary>
        /// [MaxLength=1000] 
		/// 'Address2_Composite'.<br />
        /// Shows the complete secondary address.
        /// </summary>
		[AttributeLogicalName("address2_composite")]
		public string OtherAddress
		{
			get
			{
				var value = GetAttributeValue<string>("address2_composite");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address2_Country'.<br />
        /// Country/region name in address 2.
        /// </summary>
		[AttributeLogicalName("address2_country")]
		public string OtherCountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address2_country");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_country", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address2_County'.<br />
        /// County name for address 2.
        /// </summary>
		[AttributeLogicalName("address2_county")]
		public string Address2County
		{
			get
			{
				var value = GetAttributeValue<string>("address2_county");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_county", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address2_Fax'.<br />
        /// Fax number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_fax")]
		public string Address2Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address2_fax");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_fax", value);
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address2_Latitude'.<br />
        /// Latitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_latitude")]
		public double? Address2Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_latitude");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_latitude", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address2_Line1'.<br />
        /// First line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line1")]
		public string OtherStreet1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line1");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_line1", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address2_Line2'.<br />
        /// Second line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line2")]
		public string OtherStreet2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line2");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_line2", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'Address2_Line3'.<br />
        /// Third line for entering address 2 information.
        /// </summary>
		[AttributeLogicalName("address2_line3")]
		public string OtherStreet3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line3");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_line3", value);
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address2_Longitude'.<br />
        /// Longitude for address 2.
        /// </summary>
		[AttributeLogicalName("address2_longitude")]
		public double? Address2Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_longitude");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_longitude", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'Address2_Name'.<br />
        /// Name to enter for address 2.
        /// </summary>
		[AttributeLogicalName("address2_name")]
		public string Address2Name
		{
			get
			{
				var value = GetAttributeValue<string>("address2_name");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_name", value);
			}
		}

        /// <summary>
        /// [MaxLength=40] 
		/// 'Address2_PostalCode'.<br />
        /// ZIP Code or postal code for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postalcode")]
		public string OtherZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postalcode");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_postalcode", value);
			}
		}

        /// <summary>
        /// [MaxLength=40] 
		/// 'Address2_PostOfficeBox'.<br />
        /// Post office box number for address 2.
        /// </summary>
		[AttributeLogicalName("address2_postofficebox")]
		public string Address2PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postofficebox");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_postofficebox", value);
			}
		}

        /// <summary>
        ///  
		/// 'Address2_ShippingMethodCode'.<br />
        /// Method of shipment for address 2.
        /// </summary>
		[AttributeLogicalName("address2_shippingmethodcode")]
		public Address2ShippingMethodEnum? Address2ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_shippingmethodcode");
				return (Address2ShippingMethodEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("address2_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("address2_shippingmethodcode", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Address2_StateOrProvince'.<br />
        /// State or province for address 2.
        /// </summary>
		[AttributeLogicalName("address2_stateorprovince")]
		public string OtherStateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address2_stateorprovince");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_stateorprovince", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address2_Telephone1'.<br />
        /// First telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone1")]
		public string Address2Telephone1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone1");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_telephone1", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address2_Telephone2'.<br />
        /// Second telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone2")]
		public string Address2Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone2");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_telephone2", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'Address2_Telephone3'.<br />
        /// Third telephone number associated with address 2.
        /// </summary>
		[AttributeLogicalName("address2_telephone3")]
		public string Address2Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone3");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_telephone3", value);
			}
		}

        /// <summary>
        /// [MaxLength=4] 
		/// 'Address2_UPSZone'.<br />
        /// United Parcel Service (UPS) zone for address 2.
        /// </summary>
		[AttributeLogicalName("address2_upszone")]
		public string Address2UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address2_upszone");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_upszone", value);
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address2_UTCOffset'.<br />
        /// UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.
        /// </summary>
		[AttributeLogicalName("address2_utcoffset")]
		public int? Address2UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address2_utcoffset");
			    return value;
			}
			set
			{
                SetAttributeValue("address2_utcoffset", value);
			}
		}

        /// <summary>
        ///  
		/// 'ApplicationId'.<br />
        /// The identifier for the application. This is used to access data in another application.
        /// </summary>
		[AttributeLogicalName("applicationid")]
		public Guid? ApplicationID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("applicationid");
			    return value;
			}
			set
			{
                SetAttributeValue("applicationid", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'ApplicationIdUri'.<br />
        /// The URI used as a unique logical identifier for the external app. This can be used to validate the application.
        /// </summary>
		[AttributeLogicalName("applicationiduri")]
		public string ApplicationIDURI
		{
			get
			{
				var value = GetAttributeValue<string>("applicationiduri");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'AzureActiveDirectoryObjectId'.<br />
        /// This is the application directory object Id.
        /// </summary>
		[AttributeLogicalName("azureactivedirectoryobjectid")]
		public Guid? AzureADObjectID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("azureactivedirectoryobjectid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'BusinessUnitId'.<br />
        /// Unique identifier of the business unit with which the user is associated.
        /// </summary>
		[AttributeLogicalName("businessunitid")]
		public Guid? BusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("businessunitid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("businessunitid", new EntityReference("businessunit", value.Value));
                else
	                SetAttributeValue("businessunitid", value);
			}
		}

        public string BusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("businessunitid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CalendarId'.<br />
        /// Fiscal calendar associated with the user.
        /// </summary>
		[AttributeLogicalName("calendarid")]
		public Guid? Calendar
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("calendarid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("calendarid", new EntityReference("calendar", value.Value));
                else
	                SetAttributeValue("calendarid", value);
			}
		}

        public string CalendarName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("calendarid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CALType'.<br />
        /// License type of user.
        /// </summary>
		[AttributeLogicalName("caltype")]
		public LicenseTypeEnum? LicenseType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("caltype");
				return (LicenseTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("caltype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("caltype", value);
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the user.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the user was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the systemuser.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'DefaultFiltersPopulated'.<br />
        /// Indicates if default outlook filters have been populated.
        /// </summary>
		[AttributeLogicalName("defaultfilterspopulated")]
		public bool? DefaultFiltersPopulated
		{
			get
			{
				var value = GetAttributeValue<bool?>("defaultfilterspopulated");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'DefaultMailbox'.<br />
        /// Select the mailbox associated with this user.
        /// </summary>
		[AttributeLogicalName("defaultmailbox")]
		public Guid? Mailbox
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
                return value?.Id;
			}
		}

        public string MailboxName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("defaultmailbox");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=200] 
		/// 'DefaultOdbFolderName'.<br />
        /// Type a default folder name for the user's OneDrive For Business location.
        /// </summary>
		[AttributeLogicalName("defaultodbfoldername")]
		public string DefaultOneDriveforBusinessFolderName
		{
			get
			{
				var value = GetAttributeValue<string>("defaultodbfoldername");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=500] 
		/// 'DisabledReason'.<br />
        /// Reason for disabling the user.
        /// </summary>
		[AttributeLogicalName("disabledreason")]
		public string DisabledReason
		{
			get
			{
				var value = GetAttributeValue<string>("disabledreason");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'DisplayInServiceViews'.<br />
        /// Whether to display the user in service views.
        /// </summary>
		[AttributeLogicalName("displayinserviceviews")]
		public bool? DisplayinServiceViews
		{
			get
			{
				var value = GetAttributeValue<bool?>("displayinserviceviews");
			    return value;
			}
			set
			{
                SetAttributeValue("displayinserviceviews", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'DomainName'.<br />
        /// Active Directory domain of which the user is a member.
        /// </summary>
		[AttributeLogicalName("domainname")]
		public string UserName
		{
			get
			{
				var value = GetAttributeValue<string>("domainname");
			    return value;
			}
			set
			{
                SetAttributeValue("domainname", value);
			}
		}

        /// <summary>
        ///  
		/// 'EmailRouterAccessApproval'.<br />
        /// Shows the status of the primary email address.
        /// </summary>
		[AttributeLogicalName("emailrouteraccessapproval")]
		public PrimaryEmailStatusEnum? PrimaryEmailStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("emailrouteraccessapproval");
				return (PrimaryEmailStatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("emailrouteraccessapproval", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("emailrouteraccessapproval", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'EmployeeId'.<br />
        /// Employee identifier for the user.
        /// </summary>
		[AttributeLogicalName("employeeid")]
		public string Employee
		{
			get
			{
				var value = GetAttributeValue<string>("employeeid");
			    return value;
			}
			set
			{
                SetAttributeValue("employeeid", value);
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage'.<br />
        /// Shows the default image for the record.
        /// </summary>
		[AttributeLogicalName("entityimage")]
		public byte[] EntityImage
		{
			get
			{
				var value = GetAttributeValue<byte[]>("entityimage");
			    return value;
			}
			set
			{
                SetAttributeValue("entityimage", value);
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage_Timestamp'.<br />
        ///  
        /// </summary>
		[AttributeLogicalName("entityimage_timestamp")]
		public long? EntityImage_Timestamp
		{
			get
			{
				var value = GetAttributeValue<long?>("entityimage_timestamp");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage_URL'.<br />
        ///  
        /// </summary>
		[AttributeLogicalName("entityimage_url")]
		public string EntityImage_URL
		{
			get
			{
				var value = GetAttributeValue<string>("entityimage_url");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'EntityImageId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
			    return value;
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Exchange rate for the currency associated with the systemuser with respect to the base currency.
        /// </summary>
		[AttributeLogicalName("exchangerate")]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
			    return value;
			}
		}

        /// <summary>
        /// [Required][MaxLength=64] 
		/// 'FirstName'.<br />
        /// First name of the user.
        /// </summary>
		[AttributeLogicalName("firstname")]
		public string FirstName
		{
			get
			{
				var value = GetAttributeValue<string>("firstname");
			    return value;
			}
			set
			{
                SetAttributeValue("firstname", value);
			}
		}

        /// <summary>
        /// [MaxLength=200] 
		/// 'FullName'.<br />
        /// Full name of the user.
        /// </summary>
		[AttributeLogicalName("fullname")]
		public string FullName
		{
			get
			{
				var value = GetAttributeValue<string>("fullname");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'GovernmentId'.<br />
        /// Government identifier for the user.
        /// </summary>
		[AttributeLogicalName("governmentid")]
		public string Government
		{
			get
			{
				var value = GetAttributeValue<string>("governmentid");
			    return value;
			}
			set
			{
                SetAttributeValue("governmentid", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'HomePhone'.<br />
        /// Home phone number for the user.
        /// </summary>
		[AttributeLogicalName("homephone")]
		public string HomePhone
		{
			get
			{
				var value = GetAttributeValue<string>("homephone");
			    return value;
			}
			set
			{
                SetAttributeValue("homephone", value);
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'IdentityId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("identityid")]
		public int? Uniqueuseridentityid
		{
			get
			{
				var value = GetAttributeValue<int?>("identityid");
			    return value;
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber")]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
			    return value;
			}
			set
			{
                SetAttributeValue("importsequencenumber", value);
			}
		}

        /// <summary>
        ///  
		/// 'IncomingEmailDeliveryMethod'.<br />
        /// Incoming email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("incomingemaildeliverymethod")]
		public IncomingEmailDeliveryMethodEnum? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("incomingemaildeliverymethod");
				return (IncomingEmailDeliveryMethodEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("incomingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("incomingemaildeliverymethod", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'InternalEMailAddress'.<br />
        /// Internal email address for the user.
        /// </summary>
		[AttributeLogicalName("internalemailaddress")]
		public string PrimaryEmail
		{
			get
			{
				var value = GetAttributeValue<string>("internalemailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("internalemailaddress", value);
			}
		}

        /// <summary>
        /// [Required] 
		/// 'InviteStatusCode'.<br />
        /// User invitation status.
        /// </summary>
		[AttributeLogicalName("invitestatuscode")]
		public InvitationStatusEnum? InvitationStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("invitestatuscode");
				return (InvitationStatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("invitestatuscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("invitestatuscode", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsDisabled'.<br />
        /// Information about whether the user is enabled.
        /// </summary>
		[AttributeLogicalName("isdisabled")]
		public bool? Status
		{
			get
			{
				var value = GetAttributeValue<bool?>("isdisabled");
			    return value;
			}
			set
			{
                SetAttributeValue("isdisabled", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsEmailAddressApprovedByO365Admin'.<br />
        /// Shows the status of approval of the email address by O365 Admin.
        /// </summary>
		[AttributeLogicalName("isemailaddressapprovedbyo365admin")]
		public bool? EmailAddressO365AdminApprovalStatus
		{
			get
			{
				var value = GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'IsIntegrationUser'.<br />
        /// Check if user is an integration user.
        /// </summary>
		[AttributeLogicalName("isintegrationuser")]
		public bool? Integrationusermode
		{
			get
			{
				var value = GetAttributeValue<bool?>("isintegrationuser");
			    return value;
			}
			set
			{
                SetAttributeValue("isintegrationuser", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsLicensed'.<br />
        /// Information about whether the user is licensed.
        /// </summary>
		[AttributeLogicalName("islicensed")]
		public bool? UserLicensed
		{
			get
			{
				var value = GetAttributeValue<bool?>("islicensed");
			    return value;
			}
			set
			{
                SetAttributeValue("islicensed", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsSyncWithDirectory'.<br />
        /// Information about whether the user is synced with the directory.
        /// </summary>
		[AttributeLogicalName("issyncwithdirectory")]
		public bool? UserSynced
		{
			get
			{
				var value = GetAttributeValue<bool?>("issyncwithdirectory");
			    return value;
			}
			set
			{
                SetAttributeValue("issyncwithdirectory", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'JobTitle'.<br />
        /// Job title of the user.
        /// </summary>
		[AttributeLogicalName("jobtitle")]
		public string JobTitle
		{
			get
			{
				var value = GetAttributeValue<string>("jobtitle");
			    return value;
			}
			set
			{
                SetAttributeValue("jobtitle", value);
			}
		}

        /// <summary>
        /// [Required][MaxLength=64] 
		/// 'LastName'.<br />
        /// Last name of the user.
        /// </summary>
		[AttributeLogicalName("lastname")]
		public string LastName
		{
			get
			{
				var value = GetAttributeValue<string>("lastname");
			    return value;
			}
			set
			{
                SetAttributeValue("lastname", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'MiddleName'.<br />
        /// Middle name of the user.
        /// </summary>
		[AttributeLogicalName("middlename")]
		public string MiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("middlename");
			    return value;
			}
			set
			{
                SetAttributeValue("middlename", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'MobileAlertEMail'.<br />
        /// Mobile alert email address for the user.
        /// </summary>
		[AttributeLogicalName("mobilealertemail")]
		public string MobileAlertEmail
		{
			get
			{
				var value = GetAttributeValue<string>("mobilealertemail");
			    return value;
			}
			set
			{
                SetAttributeValue("mobilealertemail", value);
			}
		}

        /// <summary>
        ///  
		/// 'MobileOfflineProfileId'.<br />
        /// Items contained with a particular SystemUser.
        /// </summary>
		[AttributeLogicalName("mobileofflineprofileid")]
		public Guid? MobileOfflineProfile
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("mobileofflineprofileid", new EntityReference("mobileofflineprofile", value.Value));
                else
	                SetAttributeValue("mobileofflineprofileid", value);
			}
		}

        public string MobileOfflineProfileName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("mobileofflineprofileid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=64] 
		/// 'MobilePhone'.<br />
        /// Mobile phone number for the user.
        /// </summary>
		[AttributeLogicalName("mobilephone")]
		public string MobilePhone
		{
			get
			{
				var value = GetAttributeValue<string>("mobilephone");
			    return value;
			}
			set
			{
                SetAttributeValue("mobilephone", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the user.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the user was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the systemuser.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'msdyn_gdproptout'.<br />
        /// Describes whether user is opted out or not
        /// </summary>
		[AttributeLogicalName("msdyn_gdproptout")]
		public bool? GDPROptout
		{
			get
			{
				var value = GetAttributeValue<bool?>("msdyn_gdproptout");
			    return value;
			}
			set
			{
                SetAttributeValue("msdyn_gdproptout", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'NickName'.<br />
        /// Nickname of the user.
        /// </summary>
		[AttributeLogicalName("nickname")]
		public string Nickname
		{
			get
			{
				var value = GetAttributeValue<string>("nickname");
			    return value;
			}
			set
			{
                SetAttributeValue("nickname", value);
			}
		}

        /// <summary>
        ///  
		/// 'OrganizationId'.<br />
        /// Unique identifier of the organization associated with the user.
        /// </summary>
		[AttributeLogicalName("organizationid")]
		public Guid? Organization
		{
			get
			{
				var value = GetAttributeValue<Guid?>("organizationid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'OutgoingEmailDeliveryMethod'.<br />
        /// Outgoing email delivery method for the user.
        /// </summary>
		[AttributeLogicalName("outgoingemaildeliverymethod")]
		public OutgoingEmailDeliveryMethodEnum? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("outgoingemaildeliverymethod");
				return (OutgoingEmailDeliveryMethodEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("outgoingemaildeliverymethod", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("outgoingemaildeliverymethod", value);
			}
		}

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
			    return value;
			}
			set
			{
                SetAttributeValue("overriddencreatedon", value);
			}
		}

        /// <summary>
        ///  
		/// 'ParentSystemUserId'.<br />
        /// Unique identifier of the manager of the user.
        /// </summary>
		[AttributeLogicalName("parentsystemuserid")]
		public Guid? Manager
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("parentsystemuserid", new EntityReference("systemuser", value.Value));
                else
	                SetAttributeValue("parentsystemuserid", value);
			}
		}

        public string ManagerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentsystemuserid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportHi'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passporthi")]
		public int? PassportHi
		{
			get
			{
				var value = GetAttributeValue<int?>("passporthi");
			    return value;
			}
			set
			{
                SetAttributeValue("passporthi", value);
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'PassportLo'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("passportlo")]
		public int? PassportLo
		{
			get
			{
				var value = GetAttributeValue<int?>("passportlo");
			    return value;
			}
			set
			{
                SetAttributeValue("passportlo", value);
			}
		}

        /// <summary>
        /// [MaxLength=100] 
		/// 'PersonalEMailAddress'.<br />
        /// Personal email address of the user.
        /// </summary>
		[AttributeLogicalName("personalemailaddress")]
		public string Email2
		{
			get
			{
				var value = GetAttributeValue<string>("personalemailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("personalemailaddress", value);
			}
		}

        /// <summary>
        /// [MaxLength=200] 
		/// 'PhotoUrl'.<br />
        /// URL for the Website on which a photo of the user is located.
        /// </summary>
		[AttributeLogicalName("photourl")]
		public string PhotoURL
		{
			get
			{
				var value = GetAttributeValue<string>("photourl");
			    return value;
			}
			set
			{
                SetAttributeValue("photourl", value);
			}
		}

        /// <summary>
        ///  
		/// 'PositionId'.<br />
        /// User's position in hierarchical security model.
        /// </summary>
		[AttributeLogicalName("positionid")]
		public Guid? Position
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("positionid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("positionid", new EntityReference("position", value.Value));
                else
	                SetAttributeValue("positionid", value);
			}
		}

        public string PositionName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("positionid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'PreferredAddressCode'.<br />
        /// Preferred address for the user.
        /// </summary>
		[AttributeLogicalName("preferredaddresscode")]
		public PreferredAddressEnum? PreferredAddress
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredaddresscode");
				return (PreferredAddressEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("preferredaddresscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("preferredaddresscode", value);
			}
		}

        /// <summary>
        ///  
		/// 'PreferredEmailCode'.<br />
        /// Preferred email address for the user.
        /// </summary>
		[AttributeLogicalName("preferredemailcode")]
		public PreferredEmailEnum? PreferredEmail
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredemailcode");
				return (PreferredEmailEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("preferredemailcode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("preferredemailcode", value);
			}
		}

        /// <summary>
        ///  
		/// 'PreferredPhoneCode'.<br />
        /// Preferred phone number for the user.
        /// </summary>
		[AttributeLogicalName("preferredphonecode")]
		public PreferredPhoneEnum? PreferredPhone
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredphonecode");
				return (PreferredPhoneEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("preferredphonecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("preferredphonecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
			    return value;
			}
			set
			{
                SetAttributeValue("processid", value);
			}
		}

        /// <summary>
        ///  
		/// 'QueueId'.<br />
        /// Unique identifier of the default queue for the user.
        /// </summary>
		[AttributeLogicalName("queueid")]
		public Guid? DefaultQueue
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("queueid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("queueid", new EntityReference("queue", value.Value));
                else
	                SetAttributeValue("queueid", value);
			}
		}

        public string DefaultQueueName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("queueid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=20] 
		/// 'Salutation'.<br />
        /// Salutation for correspondence with the user.
        /// </summary>
		[AttributeLogicalName("salutation")]
		public string Salutation
		{
			get
			{
				var value = GetAttributeValue<string>("salutation");
			    return value;
			}
			set
			{
                SetAttributeValue("salutation", value);
			}
		}

        /// <summary>
        ///  
		/// 'scfhs_CommitteeSession'.<br />
        /// Unique identifier for Committee Session associated with User.
        /// </summary>
		[AttributeLogicalName("scfhs_committeesession")]
		public Guid? CommitteeSession
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("scfhs_committeesession");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("scfhs_committeesession", new EntityReference("scfhs_committeesession", value.Value));
                else
	                SetAttributeValue("scfhs_committeesession", value);
			}
		}

        public string CommitteeSessionName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("scfhs_committeesession");
                return value?.Name;
            }
        }

		[AttributeLogicalName("scfhs_ready")]
		public bool? Ready
		{
			get
			{
				var value = GetAttributeValue<bool?>("scfhs_ready");
			    return value;
			}
			set
			{
                SetAttributeValue("scfhs_ready", value);
			}
		}

		[AttributeLogicalName("scfhs_rolename")]
		public RoleNameEnum? RoleName
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("scfhs_rolename");
				return (RoleNameEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("scfhs_rolename", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("scfhs_rolename", value);
			}
		}

		[AttributeLogicalName("scfhs_sector")]
		public Guid? Sector
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("scfhs_sector");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("scfhs_sector", new EntityReference("scfhs_sector", value.Value));
                else
	                SetAttributeValue("scfhs_sector", value);
			}
		}

        public string SectorName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("scfhs_sector");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SetupUser'.<br />
        /// Check if user is a setup user.
        /// </summary>
		[AttributeLogicalName("setupuser")]
		public bool? RestrictedAccessMode
		{
			get
			{
				var value = GetAttributeValue<bool?>("setupuser");
			    return value;
			}
			set
			{
                SetAttributeValue("setupuser", value);
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'SharePointEmailAddress'.<br />
        /// SharePoint Work Email Address
        /// </summary>
		[AttributeLogicalName("sharepointemailaddress")]
		public string SharePointEmailAddress
		{
			get
			{
				var value = GetAttributeValue<string>("sharepointemailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("sharepointemailaddress", value);
			}
		}

        /// <summary>
        ///  
		/// 'SiteId'.<br />
        /// site_system_users
        /// </summary>
		[AttributeLogicalName("siteid")]
		public Guid? Site
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("siteid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("siteid", new EntityReference("site", value.Value));
                else
	                SetAttributeValue("siteid", value);
			}
		}

        public string SiteName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("siteid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=100] 
		/// 'Skills'.<br />
        /// Skill set of the user.
        /// </summary>
		[AttributeLogicalName("skills")]
		public string Skills
		{
			get
			{
				var value = GetAttributeValue<string>("skills");
			    return value;
			}
			set
			{
                SetAttributeValue("skills", value);
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
			    return value;
			}
			set
			{
                SetAttributeValue("stageid", value);
			}
		}

        /// <summary>
        ///  
		/// 'SystemUserId'.<br />
        /// Unique identifier for the user.
        /// </summary>
		[AttributeLogicalName("systemuserid")]
		public Guid? UserId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("systemuserid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("systemuserid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'TerritoryId'.<br />
        /// territory_system_users
        /// </summary>
		[AttributeLogicalName("territoryid")]
		public Guid? Territory
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("territoryid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("territoryid", new EntityReference("territory", value.Value));
                else
	                SetAttributeValue("territoryid", value);
			}
		}

        public string TerritoryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("territoryid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber")]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
			    return value;
			}
			set
			{
                SetAttributeValue("timezoneruleversionnumber", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'Title'.<br />
        /// Title of the user.
        /// </summary>
		[AttributeLogicalName("title")]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("title");
			    return value;
			}
			set
			{
                SetAttributeValue("title", value);
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Unique identifier of the currency associated with the systemuser.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
	                SetAttributeValue("transactioncurrencyid", value);
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath")]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
			    return value;
			}
			set
			{
                SetAttributeValue("traversedpath", value);
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'UserLicenseType'.<br />
        /// Shows the type of user license.
        /// </summary>
		[AttributeLogicalName("userlicensetype")]
		public int? UserLicenseType
		{
			get
			{
				var value = GetAttributeValue<int?>("userlicensetype");
			    return value;
			}
			set
			{
                SetAttributeValue("userlicensetype", value);
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode")]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
			    return value;
			}
			set
			{
                SetAttributeValue("utcconversiontimezonecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the user.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? Versionnumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=1024] 
		/// 'WindowsLiveID'.<br />
        /// Windows Live ID
        /// </summary>
		[AttributeLogicalName("windowsliveid")]
		public string WindowsLiveID
		{
			get
			{
				var value = GetAttributeValue<string>("windowsliveid");
			    return value;
			}
			set
			{
                SetAttributeValue("windowsliveid", value);
			}
		}

        /// <summary>
        /// [MaxLength=200] 
		/// 'YammerEmailAddress'.<br />
        /// User's Yammer login email address
        /// </summary>
		[AttributeLogicalName("yammeremailaddress")]
		public string YammerEmail
		{
			get
			{
				var value = GetAttributeValue<string>("yammeremailaddress");
			    return value;
			}
			set
			{
                SetAttributeValue("yammeremailaddress", value);
			}
		}

        /// <summary>
        /// [MaxLength=128] 
		/// 'YammerUserId'.<br />
        /// User's Yammer ID
        /// </summary>
		[AttributeLogicalName("yammeruserid")]
		public string YammerUserID
		{
			get
			{
				var value = GetAttributeValue<string>("yammeruserid");
			    return value;
			}
			set
			{
                SetAttributeValue("yammeruserid", value);
			}
		}

        /// <summary>
        /// [MaxLength=64] 
		/// 'YomiFirstName'.<br />
        /// Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifirstname")]
		public string YomiFirstName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifirstname");
			    return value;
			}
			set
			{
                SetAttributeValue("yomifirstname", value);
			}
		}

        /// <summary>
        /// [MaxLength=200] 
		/// 'YomiFullName'.<br />
        /// Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomifullname")]
		public string YomiFullName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifullname");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=64] 
		/// 'YomiLastName'.<br />
        /// Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomilastname")]
		public string YomiLastName
		{
			get
			{
				var value = GetAttributeValue<string>("yomilastname");
			    return value;
			}
			set
			{
                SetAttributeValue("yomilastname", value);
			}
		}

        /// <summary>
        /// [MaxLength=50] 
		/// 'YomiMiddleName'.<br />
        /// Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.
        /// </summary>
		[AttributeLogicalName("yomimiddlename")]
		public string YomiMiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("yomimiddlename");
			    return value;
			}
			set
			{
                SetAttributeValue("yomimiddlename", value);
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'createdby_pluginassembly'
		/// </summary>
		[RelationshipSchemaName("createdby_pluginassembly")]
		public PluginAssembly[] PluginAssemblysOfCreatedBy
		{
			get => GetRelatedEntities<PluginAssembly>("createdby_pluginassembly", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("createdby_pluginassembly", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'createdby_plugintype'
		/// </summary>
		[RelationshipSchemaName("createdby_plugintype")]
		public PluginType[] PluginTypesOfCreatedBy
		{
			get => GetRelatedEntities<PluginType>("createdby_plugintype", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("createdby_plugintype", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'createdby_sdkmessage'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessage")]
		public SdkMessage[] SdkMessagesOfCreatedBy
		{
			get => GetRelatedEntities<SdkMessage>("createdby_sdkmessage", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("createdby_sdkmessage", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'createdby_sdkmessagefilter'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessagefilter")]
		public SdkMessageFilter[] SdkMessageFiltersOfCreatedBy
		{
			get => GetRelatedEntities<SdkMessageFilter>("createdby_sdkmessagefilter", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("createdby_sdkmessagefilter", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'createdby_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfCreatedBy
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("createdby_sdkmessageprocessingstep", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("createdby_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'createdby_sdkmessageprocessingstepimage'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessageprocessingstepimage")]
		public SdkMessageProcessingStepImage[] SdkMessageProcessingStepImagesOfCreatedBy
		{
			get => GetRelatedEntities<SdkMessageProcessingStepImage>("createdby_sdkmessageprocessingstepimage", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("createdby_sdkmessageprocessingstepimage", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'createdby_sdkmessageprocessingstepsecureconfig'
		/// </summary>
		[RelationshipSchemaName("createdby_sdkmessageprocessingstepsecureconfig")]
		public SdkMessageProcessingStepSecureConfiguration[] SdkMessageProcessingStepSecureConfigurationsOfCreatedBy
		{
			get => GetRelatedEntities<SdkMessageProcessingStepSecureConfiguration>("createdby_sdkmessageprocessingstepsecureconfig", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("createdby_sdkmessageprocessingstepsecureconfig", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'impersonatinguserid_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("impersonatinguserid_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfImpersonatingUser
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("impersonatinguserid_sdkmessageprocessingstep", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("impersonatinguserid_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_pluginassembly_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_pluginassembly_createdonbehalfby")]
		public PluginAssembly[] PluginAssemblysOfCreatedByDelegate
		{
			get => GetRelatedEntities<PluginAssembly>("lk_pluginassembly_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_pluginassembly_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_pluginassembly_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_pluginassembly_modifiedonbehalfby")]
		public PluginAssembly[] PluginAssemblysOfModifiedByDelegate
		{
			get => GetRelatedEntities<PluginAssembly>("lk_pluginassembly_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_pluginassembly_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_plugintype_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_plugintype_createdonbehalfby")]
		public PluginType[] PluginTypesOfCreatedByDelegate
		{
			get => GetRelatedEntities<PluginType>("lk_plugintype_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_plugintype_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_plugintype_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_plugintype_modifiedonbehalfby")]
		public PluginType[] PluginTypesOfModifiedByDelegate
		{
			get => GetRelatedEntities<PluginType>("lk_plugintype_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_plugintype_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessage_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessage_createdonbehalfby")]
		public SdkMessage[] SdkMessagesOfCreatedByDelegate
		{
			get => GetRelatedEntities<SdkMessage>("lk_sdkmessage_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessage_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessage_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessage_modifiedonbehalfby")]
		public SdkMessage[] SdkMessagesOfModifiedByDelegate
		{
			get => GetRelatedEntities<SdkMessage>("lk_sdkmessage_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessage_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessagefilter_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessagefilter_createdonbehalfby")]
		public SdkMessageFilter[] SdkMessageFiltersOfCreatedByDelegate
		{
			get => GetRelatedEntities<SdkMessageFilter>("lk_sdkmessagefilter_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessagefilter_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessagefilter_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessagefilter_modifiedonbehalfby")]
		public SdkMessageFilter[] SdkMessageFiltersOfModifiedByDelegate
		{
			get => GetRelatedEntities<SdkMessageFilter>("lk_sdkmessagefilter_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessagefilter_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessageprocessingstep_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstep_createdonbehalfby")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfCreatedByDelegate
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("lk_sdkmessageprocessingstep_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessageprocessingstep_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessageprocessingstep_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstep_modifiedonbehalfby")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfModifiedByDelegate
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("lk_sdkmessageprocessingstep_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessageprocessingstep_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessageprocessingstepimage_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstepimage_createdonbehalfby")]
		public SdkMessageProcessingStepImage[] SdkMessageProcessingStepImagesOfCreatedByDelegate
		{
			get => GetRelatedEntities<SdkMessageProcessingStepImage>("lk_sdkmessageprocessingstepimage_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessageprocessingstepimage_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessageprocessingstepimage_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstepimage_modifiedonbehalfby")]
		public SdkMessageProcessingStepImage[] SdkMessageProcessingStepImagesOfModifiedByDelegate
		{
			get => GetRelatedEntities<SdkMessageProcessingStepImage>("lk_sdkmessageprocessingstepimage_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessageprocessingstepimage_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby")]
		public SdkMessageProcessingStepSecureConfiguration[] SdkMessageProcessingStepSecureConfigurationsOfCreatedByDelegate
		{
			get => GetRelatedEntities<SdkMessageProcessingStepSecureConfiguration>("lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby")]
		public SdkMessageProcessingStepSecureConfiguration[] SdkMessageProcessingStepSecureConfigurationsOfModifiedByDelegate
		{
			get => GetRelatedEntities<SdkMessageProcessingStepSecureConfiguration>("lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedByDelegate
		{
			get => GetRelatedEntities<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedByDelegate
		{
			get => GetRelatedEntities<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfCreatedBy
		{
			get => GetRelatedEntities<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfModifiedBy
		{
			get => GetRelatedEntities<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'modifiedby_pluginassembly'
		/// </summary>
		[RelationshipSchemaName("modifiedby_pluginassembly")]
		public PluginAssembly[] PluginAssemblysOfModifiedBy
		{
			get => GetRelatedEntities<PluginAssembly>("modifiedby_pluginassembly", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("modifiedby_pluginassembly", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'modifiedby_plugintype'
		/// </summary>
		[RelationshipSchemaName("modifiedby_plugintype")]
		public PluginType[] PluginTypesOfModifiedBy
		{
			get => GetRelatedEntities<PluginType>("modifiedby_plugintype", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("modifiedby_plugintype", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'modifiedby_sdkmessage'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessage")]
		public SdkMessage[] SdkMessagesOfModifiedBy
		{
			get => GetRelatedEntities<SdkMessage>("modifiedby_sdkmessage", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("modifiedby_sdkmessage", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'modifiedby_sdkmessagefilter'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessagefilter")]
		public SdkMessageFilter[] SdkMessageFiltersOfModifiedBy
		{
			get => GetRelatedEntities<SdkMessageFilter>("modifiedby_sdkmessagefilter", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("modifiedby_sdkmessagefilter", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'modifiedby_sdkmessageprocessingstep'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessageprocessingstep")]
		public SdkMessageProcessingStep[] SdkMessageProcessingStepsOfModifiedBy
		{
			get => GetRelatedEntities<SdkMessageProcessingStep>("modifiedby_sdkmessageprocessingstep", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("modifiedby_sdkmessageprocessingstep", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'modifiedby_sdkmessageprocessingstepimage'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessageprocessingstepimage")]
		public SdkMessageProcessingStepImage[] SdkMessageProcessingStepImagesOfModifiedBy
		{
			get => GetRelatedEntities<SdkMessageProcessingStepImage>("modifiedby_sdkmessageprocessingstepimage", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("modifiedby_sdkmessageprocessingstepimage", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'modifiedby_sdkmessageprocessingstepsecureconfig'
		/// </summary>
		[RelationshipSchemaName("modifiedby_sdkmessageprocessingstepsecureconfig")]
		public SdkMessageProcessingStepSecureConfiguration[] SdkMessageProcessingStepSecureConfigurationsOfModifiedBy
		{
			get => GetRelatedEntities<SdkMessageProcessingStepSecureConfiguration>("modifiedby_sdkmessageprocessingstepsecureconfig", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("modifiedby_sdkmessageprocessingstepsecureconfig", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'system_user_workflow'
		/// </summary>
		[RelationshipSchemaName("system_user_workflow")]
		public Process[] ProcesssOfOwningUser
		{
			get => GetRelatedEntities<Process>("system_user_workflow", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("system_user_workflow", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public User[] UsersOfManager
		{
			get => GetRelatedEntities<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'workflow_createdby'
		/// </summary>
		[RelationshipSchemaName("workflow_createdby")]
		public Process[] ProcesssOfCreatedBy
		{
			get => GetRelatedEntities<Process>("workflow_createdby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("workflow_createdby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'workflow_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("workflow_createdonbehalfby")]
		public Process[] ProcesssOfCreatedByDelegate
		{
			get => GetRelatedEntities<Process>("workflow_createdonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("workflow_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'workflow_modifiedby'
		/// </summary>
		[RelationshipSchemaName("workflow_modifiedby")]
		public Process[] ProcesssOfModifiedBy
		{
			get => GetRelatedEntities<Process>("workflow_modifiedby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("workflow_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'workflow_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("workflow_modifiedonbehalfby")]
		public Process[] ProcesssOfModifiedByDelegate
		{
			get => GetRelatedEntities<Process>("workflow_modifiedonbehalfby", null)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("workflow_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_createdonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuser_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuser_modifiedonbehalfby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_createdby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_createdby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'lk_systemuserbase_modifiedby'
		/// </summary>
		[RelationshipSchemaName("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("lk_systemuserbase_modifiedby", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'user_parent_user'
		/// </summary>
		[RelationshipSchemaName("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentsystemuserid")]
		public User UserAsManager
		{
			get => GetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("user_parent_user", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName PluginAssemblysOfCreatedBy = new RelationName("PluginAssemblysOfCreatedBy");
			public static RelationName PluginTypesOfCreatedBy = new RelationName("PluginTypesOfCreatedBy");
			public static RelationName SdkMessagesOfCreatedBy = new RelationName("SdkMessagesOfCreatedBy");
			public static RelationName SdkMessageFiltersOfCreatedBy = new RelationName("SdkMessageFiltersOfCreatedBy");
			public static RelationName SdkMessageProcessingStepsOfCreatedBy = new RelationName("SdkMessageProcessingStepsOfCreatedBy");
			public static RelationName SdkMessageProcessingStepImagesOfCreatedBy = new RelationName("SdkMessageProcessingStepImagesOfCreatedBy");
			public static RelationName SdkMessageProcessingStepSecureConfigurationsOfCreatedBy = new RelationName("SdkMessageProcessingStepSecureConfigurationsOfCreatedBy");
			public static RelationName SdkMessageProcessingStepsOfImpersonatingUser = new RelationName("SdkMessageProcessingStepsOfImpersonatingUser");
			public static RelationName PluginAssemblysOfCreatedByDelegate = new RelationName("PluginAssemblysOfCreatedByDelegate");
			public static RelationName PluginAssemblysOfModifiedByDelegate = new RelationName("PluginAssemblysOfModifiedByDelegate");
			public static RelationName PluginTypesOfCreatedByDelegate = new RelationName("PluginTypesOfCreatedByDelegate");
			public static RelationName PluginTypesOfModifiedByDelegate = new RelationName("PluginTypesOfModifiedByDelegate");
			public static RelationName SdkMessagesOfCreatedByDelegate = new RelationName("SdkMessagesOfCreatedByDelegate");
			public static RelationName SdkMessagesOfModifiedByDelegate = new RelationName("SdkMessagesOfModifiedByDelegate");
			public static RelationName SdkMessageFiltersOfCreatedByDelegate = new RelationName("SdkMessageFiltersOfCreatedByDelegate");
			public static RelationName SdkMessageFiltersOfModifiedByDelegate = new RelationName("SdkMessageFiltersOfModifiedByDelegate");
			public static RelationName SdkMessageProcessingStepsOfCreatedByDelegate = new RelationName("SdkMessageProcessingStepsOfCreatedByDelegate");
			public static RelationName SdkMessageProcessingStepsOfModifiedByDelegate = new RelationName("SdkMessageProcessingStepsOfModifiedByDelegate");
			public static RelationName SdkMessageProcessingStepImagesOfCreatedByDelegate = new RelationName("SdkMessageProcessingStepImagesOfCreatedByDelegate");
			public static RelationName SdkMessageProcessingStepImagesOfModifiedByDelegate = new RelationName("SdkMessageProcessingStepImagesOfModifiedByDelegate");
			public static RelationName SdkMessageProcessingStepSecureConfigurationsOfCreatedByDelegate = new RelationName("SdkMessageProcessingStepSecureConfigurationsOfCreatedByDelegate");
			public static RelationName SdkMessageProcessingStepSecureConfigurationsOfModifiedByDelegate = new RelationName("SdkMessageProcessingStepSecureConfigurationsOfModifiedByDelegate");
			public static RelationName UsersOfCreatedByDelegate = new RelationName("UsersOfCreatedByDelegate");
			public static RelationName UsersOfModifiedByDelegate = new RelationName("UsersOfModifiedByDelegate");
			public static RelationName UsersOfCreatedBy = new RelationName("UsersOfCreatedBy");
			public static RelationName UsersOfModifiedBy = new RelationName("UsersOfModifiedBy");
			public static RelationName PluginAssemblysOfModifiedBy = new RelationName("PluginAssemblysOfModifiedBy");
			public static RelationName PluginTypesOfModifiedBy = new RelationName("PluginTypesOfModifiedBy");
			public static RelationName SdkMessagesOfModifiedBy = new RelationName("SdkMessagesOfModifiedBy");
			public static RelationName SdkMessageFiltersOfModifiedBy = new RelationName("SdkMessageFiltersOfModifiedBy");
			public static RelationName SdkMessageProcessingStepsOfModifiedBy = new RelationName("SdkMessageProcessingStepsOfModifiedBy");
			public static RelationName SdkMessageProcessingStepImagesOfModifiedBy = new RelationName("SdkMessageProcessingStepImagesOfModifiedBy");
			public static RelationName SdkMessageProcessingStepSecureConfigurationsOfModifiedBy = new RelationName("SdkMessageProcessingStepSecureConfigurationsOfModifiedBy");
			public static RelationName ProcesssOfOwningUser = new RelationName("ProcesssOfOwningUser");
			public static RelationName UsersOfManager = new RelationName("UsersOfManager");
			public static RelationName ProcesssOfCreatedBy = new RelationName("ProcesssOfCreatedBy");
			public static RelationName ProcesssOfCreatedByDelegate = new RelationName("ProcesssOfCreatedByDelegate");
			public static RelationName ProcesssOfModifiedBy = new RelationName("ProcesssOfModifiedBy");
			public static RelationName ProcesssOfModifiedByDelegate = new RelationName("ProcesssOfModifiedByDelegate");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsManager = new RelationName("UserAsManager");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["PluginAssemblysOfCreatedBy"] = new object[] { "PluginAssemblysOfCreatedBy", "pluginassembly", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "createdby_pluginassembly", typeof (PluginAssembly[]) };
			relationProperties["PluginTypesOfCreatedBy"] = new object[] { "PluginTypesOfCreatedBy", "plugintype", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "createdby_plugintype", typeof (PluginType[]) };
			relationProperties["SdkMessagesOfCreatedBy"] = new object[] { "SdkMessagesOfCreatedBy", "sdkmessage", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "createdby_sdkmessage", typeof (SdkMessage[]) };
			relationProperties["SdkMessageFiltersOfCreatedBy"] = new object[] { "SdkMessageFiltersOfCreatedBy", "sdkmessagefilter", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "createdby_sdkmessagefilter", typeof (SdkMessageFilter[]) };
			relationProperties["SdkMessageProcessingStepsOfCreatedBy"] = new object[] { "SdkMessageProcessingStepsOfCreatedBy", "sdkmessageprocessingstep", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "createdby_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["SdkMessageProcessingStepImagesOfCreatedBy"] = new object[] { "SdkMessageProcessingStepImagesOfCreatedBy", "sdkmessageprocessingstepimage", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "createdby_sdkmessageprocessingstepimage", typeof (SdkMessageProcessingStepImage[]) };
			relationProperties["SdkMessageProcessingStepSecureConfigurationsOfCreatedBy"] = new object[] { "SdkMessageProcessingStepSecureConfigurationsOfCreatedBy", "sdkmessageprocessingstepsecureconfig", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "createdby_sdkmessageprocessingstepsecureconfig", typeof (SdkMessageProcessingStepSecureConfiguration[]) };
			relationProperties["SdkMessageProcessingStepsOfImpersonatingUser"] = new object[] { "SdkMessageProcessingStepsOfImpersonatingUser", "sdkmessageprocessingstep", "systemuser", "impersonatinguserid", "systemuserid", "systemuserid", "systemuserid", "impersonatinguserid_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["PluginAssemblysOfCreatedByDelegate"] = new object[] { "PluginAssemblysOfCreatedByDelegate", "pluginassembly", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_pluginassembly_createdonbehalfby", typeof (PluginAssembly[]) };
			relationProperties["PluginAssemblysOfModifiedByDelegate"] = new object[] { "PluginAssemblysOfModifiedByDelegate", "pluginassembly", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_pluginassembly_modifiedonbehalfby", typeof (PluginAssembly[]) };
			relationProperties["PluginTypesOfCreatedByDelegate"] = new object[] { "PluginTypesOfCreatedByDelegate", "plugintype", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_plugintype_createdonbehalfby", typeof (PluginType[]) };
			relationProperties["PluginTypesOfModifiedByDelegate"] = new object[] { "PluginTypesOfModifiedByDelegate", "plugintype", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_plugintype_modifiedonbehalfby", typeof (PluginType[]) };
			relationProperties["SdkMessagesOfCreatedByDelegate"] = new object[] { "SdkMessagesOfCreatedByDelegate", "sdkmessage", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessage_createdonbehalfby", typeof (SdkMessage[]) };
			relationProperties["SdkMessagesOfModifiedByDelegate"] = new object[] { "SdkMessagesOfModifiedByDelegate", "sdkmessage", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessage_modifiedonbehalfby", typeof (SdkMessage[]) };
			relationProperties["SdkMessageFiltersOfCreatedByDelegate"] = new object[] { "SdkMessageFiltersOfCreatedByDelegate", "sdkmessagefilter", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessagefilter_createdonbehalfby", typeof (SdkMessageFilter[]) };
			relationProperties["SdkMessageFiltersOfModifiedByDelegate"] = new object[] { "SdkMessageFiltersOfModifiedByDelegate", "sdkmessagefilter", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessagefilter_modifiedonbehalfby", typeof (SdkMessageFilter[]) };
			relationProperties["SdkMessageProcessingStepsOfCreatedByDelegate"] = new object[] { "SdkMessageProcessingStepsOfCreatedByDelegate", "sdkmessageprocessingstep", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessageprocessingstep_createdonbehalfby", typeof (SdkMessageProcessingStep[]) };
			relationProperties["SdkMessageProcessingStepsOfModifiedByDelegate"] = new object[] { "SdkMessageProcessingStepsOfModifiedByDelegate", "sdkmessageprocessingstep", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessageprocessingstep_modifiedonbehalfby", typeof (SdkMessageProcessingStep[]) };
			relationProperties["SdkMessageProcessingStepImagesOfCreatedByDelegate"] = new object[] { "SdkMessageProcessingStepImagesOfCreatedByDelegate", "sdkmessageprocessingstepimage", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessageprocessingstepimage_createdonbehalfby", typeof (SdkMessageProcessingStepImage[]) };
			relationProperties["SdkMessageProcessingStepImagesOfModifiedByDelegate"] = new object[] { "SdkMessageProcessingStepImagesOfModifiedByDelegate", "sdkmessageprocessingstepimage", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessageprocessingstepimage_modifiedonbehalfby", typeof (SdkMessageProcessingStepImage[]) };
			relationProperties["SdkMessageProcessingStepSecureConfigurationsOfCreatedByDelegate"] = new object[] { "SdkMessageProcessingStepSecureConfigurationsOfCreatedByDelegate", "sdkmessageprocessingstepsecureconfig", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessageprocessingstepsecureconfig_createdonbehalfby", typeof (SdkMessageProcessingStepSecureConfiguration[]) };
			relationProperties["SdkMessageProcessingStepSecureConfigurationsOfModifiedByDelegate"] = new object[] { "SdkMessageProcessingStepSecureConfigurationsOfModifiedByDelegate", "sdkmessageprocessingstepsecureconfig", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_sdkmessageprocessingstepsecureconfig_modifiedonbehalfby", typeof (SdkMessageProcessingStepSecureConfiguration[]) };
			relationProperties["UsersOfCreatedByDelegate"] = new object[] { "UsersOfCreatedByDelegate", "systemuser", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User[]) };
			relationProperties["UsersOfModifiedByDelegate"] = new object[] { "UsersOfModifiedByDelegate", "systemuser", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User[]) };
			relationProperties["UsersOfCreatedBy"] = new object[] { "UsersOfCreatedBy", "systemuser", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User[]) };
			relationProperties["UsersOfModifiedBy"] = new object[] { "UsersOfModifiedBy", "systemuser", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User[]) };
			relationProperties["PluginAssemblysOfModifiedBy"] = new object[] { "PluginAssemblysOfModifiedBy", "pluginassembly", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "modifiedby_pluginassembly", typeof (PluginAssembly[]) };
			relationProperties["PluginTypesOfModifiedBy"] = new object[] { "PluginTypesOfModifiedBy", "plugintype", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "modifiedby_plugintype", typeof (PluginType[]) };
			relationProperties["SdkMessagesOfModifiedBy"] = new object[] { "SdkMessagesOfModifiedBy", "sdkmessage", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "modifiedby_sdkmessage", typeof (SdkMessage[]) };
			relationProperties["SdkMessageFiltersOfModifiedBy"] = new object[] { "SdkMessageFiltersOfModifiedBy", "sdkmessagefilter", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "modifiedby_sdkmessagefilter", typeof (SdkMessageFilter[]) };
			relationProperties["SdkMessageProcessingStepsOfModifiedBy"] = new object[] { "SdkMessageProcessingStepsOfModifiedBy", "sdkmessageprocessingstep", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "modifiedby_sdkmessageprocessingstep", typeof (SdkMessageProcessingStep[]) };
			relationProperties["SdkMessageProcessingStepImagesOfModifiedBy"] = new object[] { "SdkMessageProcessingStepImagesOfModifiedBy", "sdkmessageprocessingstepimage", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "modifiedby_sdkmessageprocessingstepimage", typeof (SdkMessageProcessingStepImage[]) };
			relationProperties["SdkMessageProcessingStepSecureConfigurationsOfModifiedBy"] = new object[] { "SdkMessageProcessingStepSecureConfigurationsOfModifiedBy", "sdkmessageprocessingstepsecureconfig", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "modifiedby_sdkmessageprocessingstepsecureconfig", typeof (SdkMessageProcessingStepSecureConfiguration[]) };
			relationProperties["ProcesssOfOwningUser"] = new object[] { "ProcesssOfOwningUser", "workflow", "systemuser", "owninguser", "systemuserid", "systemuserid", "systemuserid", "system_user_workflow", typeof (Process[]) };
			relationProperties["UsersOfManager"] = new object[] { "UsersOfManager", "systemuser", "systemuser", "parentsystemuserid", "systemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User[]) };
			relationProperties["ProcesssOfCreatedBy"] = new object[] { "ProcesssOfCreatedBy", "workflow", "systemuser", "createdby", "systemuserid", "systemuserid", "systemuserid", "workflow_createdby", typeof (Process[]) };
			relationProperties["ProcesssOfCreatedByDelegate"] = new object[] { "ProcesssOfCreatedByDelegate", "workflow", "systemuser", "createdonbehalfby", "systemuserid", "systemuserid", "systemuserid", "workflow_createdonbehalfby", typeof (Process[]) };
			relationProperties["ProcesssOfModifiedBy"] = new object[] { "ProcesssOfModifiedBy", "workflow", "systemuser", "modifiedby", "systemuserid", "systemuserid", "systemuserid", "workflow_modifiedby", typeof (Process[]) };
			relationProperties["ProcesssOfModifiedByDelegate"] = new object[] { "ProcesssOfModifiedByDelegate", "workflow", "systemuser", "modifiedonbehalfby", "systemuserid", "systemuserid", "systemuserid", "workflow_modifiedonbehalfby", typeof (Process[]) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "systemuser", "systemuserid", "createdonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "systemuser", "systemuserid", "modifiedonbehalfby", "systemuserid", "systemuserid", "lk_systemuser_modifiedonbehalfby", typeof (User) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "systemuser", "systemuserid", "createdby", "systemuserid", "systemuserid", "lk_systemuserbase_createdby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "systemuser", "systemuserid", "modifiedby", "systemuserid", "systemuserid", "lk_systemuserbase_modifiedby", typeof (User) };
			relationProperties["UserAsManager"] = new object[] { "UserAsManager", "systemuser", "systemuser", "systemuserid", "parentsystemuserid", "systemuserid", "systemuserid", "user_parent_user", typeof (User) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public User(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["systemuserid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum AccessModeEnum
		{
			ReadWrite = 0,
			Administrative = 1,
			Read = 2,
			SupportUser = 3,
			Noninteractive = 4,
			DelegatedAdmin = 5,
		}
	
		public enum Address1AddressTypeEnum
		{
			DefaultValue = 1,
		}
	
		public enum Address1ShippingMethodEnum
		{
			DefaultValue = 1,
		}
	
		public enum Address2AddressTypeEnum
		{
			DefaultValue = 1,
		}
	
		public enum Address2ShippingMethodEnum
		{
			DefaultValue = 1,
		}
	
		public enum LicenseTypeEnum
		{
			Professional = 0,
			Administrative = 1,
			Basic = 2,
			DeviceProfessional = 3,
			DeviceBasic = 4,
			Essential = 5,
			DeviceEssential = 6,
			Enterprise = 7,
			DeviceEnterprise = 8,
			Sales = 9,
			Service = 10,
			FieldService = 11,
			ProjectService = 12,
		}
	
		public enum DefaultFiltersPopulatedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum DisplayinServiceViewsEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum PrimaryEmailStatusEnum
		{
			Empty = 0,
			Approved = 1,
			PendingApproval = 2,
			Rejected = 3,
		}
	
		public enum IncomingEmailDeliveryMethodEnum
		{
			None = 0,
			MicrosoftDynamicsCRMforOutlook = 1,
			ServerSideSynchronizationorEmailRouter = 2,
			ForwardMailbox = 3,
		}
	
		public enum InvitationStatusEnum
		{
			InvitationNotSent = 0,
			Invited = 1,
			InvitationNearExpired = 2,
			InvitationExpired = 3,
			InvitationAccepted = 4,
			InvitationRejected = 5,
			InvitationRevoked = 6,
		}
	
		public enum StatusEnum
		{
			Disabled = 1,
			Enabled = 0,
		}
	
		public enum EmailAddressO365AdminApprovalStatusEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum IntegrationusermodeEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum UserLicensedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum UserSyncedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum GDPROptoutEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum OutgoingEmailDeliveryMethodEnum
		{
			None = 0,
			MicrosoftDynamicsCRMforOutlook = 1,
			ServerSideSynchronizationorEmailRouter = 2,
		}
	
		public enum PreferredAddressEnum
		{
			MailingAddress = 1,
			OtherAddress = 2,
		}
	
		public enum PreferredEmailEnum
		{
			DefaultValue = 1,
		}
	
		public enum PreferredPhoneEnum
		{
			MainPhone = 1,
			OtherPhone = 2,
			HomePhone = 3,
			MobilePhone = 4,
		}
	
		public enum ReadyEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum RoleNameEnum
		{
			CP_IA = 776070000,
			CP_PA = 776070001,
			SPL_IA = 776070002,
			SPL_PA = 776070003,
			SPV_IA = 776070004,
			SPV_PA = 776070005,
			CM_IA = 776070006,
			CM_PA = 776070007,
			D_PA = 776070008,
			D_IA = 776070009,
			CCM = 776070010,
			ED = 776070011,
			D = 776070012,
		}
	
		public enum RestrictedAccessModeEnum
		{
			Yes = 1,
			No = 0,
		}
	
		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#region Process

	/// <summary>
	/// 'Workflow'.<br />
	/// Set of logical rules that define the steps necessary to automate a specific business process, task, or set of actions to be performed.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("workflow")]
	public partial class Process : GeneratedEntity<Process.RelationName>
	{
		public Process() : base(EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Process(string[] keys, object[] values) : base(keys, values, EntityLogicalName)
		{ }
		
		/// <inheritdoc/>
		public Process(object obj, Type limitingType) : base(obj, limitingType, EntityLogicalName)
		{ }

		public const string DisplayName = "Process";
		public const string SchemaName = "Workflow";
		public const string EntityLogicalName = "workflow";
		public const int EntityTypeCode = 4703;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}

		#region Attributes

		[AttributeLogicalName("workflowid")]
		public override System.Guid Id
		{
			get => (ProcessId == null || ProcessId == Guid.Empty) ? base.Id : ProcessId.GetValueOrDefault();
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("workflowid");
                    base.Id = value;
                } else {
				    ProcessId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'ActiveWorkflowId'.<br />
        /// Unique identifier of the latest activation record for the process.
        /// </summary>
		[AttributeLogicalName("activeworkflowid")]
		public Guid? ActiveProcessID
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("activeworkflowid");
                return value?.Id;
			}
		}

        public string ActiveProcessIDName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("activeworkflowid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'AsyncAutoDelete'.<br />
        /// Indicates whether the asynchronous system job is automatically deleted on completion.
        /// </summary>
		[AttributeLogicalName("asyncautodelete")]
		public bool? DeleteJobOnCompletion
		{
			get
			{
				var value = GetAttributeValue<bool?>("asyncautodelete");
			    return value;
			}
			set
			{
                SetAttributeValue("asyncautodelete", value);
			}
		}

        /// <summary>
        ///  
		/// 'BusinessProcessType'.<br />
        /// Business Process Type.
        /// </summary>
		[AttributeLogicalName("businessprocesstype")]
		public BusinessProcessTypeEnum? BusinessProcessType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("businessprocesstype");
				return (BusinessProcessTypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("businessprocesstype", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("businessprocesstype", value);
			}
		}

        /// <summary>
        ///  
		/// 'Category'.<br />
        /// Category of the process.
        /// </summary>
		[AttributeLogicalName("category")]
		public CategoryEnum? Category
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("category");
				return (CategoryEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("category", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("category", value);
			}
		}

        /// <summary>
        /// [MaxLength=1073741823] 
		/// 'ClientData'.<br />
        /// Business logic converted into client data
        /// </summary>
		[AttributeLogicalName("clientdata")]
		public string ClientData
		{
			get
			{
				var value = GetAttributeValue<string>("clientdata");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ComponentState'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("componentstate")]
		public GlobalEnums.ComponentState? ComponentState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("componentstate");
				return (GlobalEnums.ComponentState?)value?.Value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the process.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Id;
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the process was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the process.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Id;
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'CreateStage'.<br />
        /// Stage of the process when triggered on Create.
        /// </summary>
		[AttributeLogicalName("createstage")]
		public GlobalEnums.WorkflowStage? CreateStage
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("createstage");
				return (GlobalEnums.WorkflowStage?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("createstage", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("createstage", value);
			}
		}

        /// <summary>
        ///  
		/// 'DeleteStage'.<br />
        /// Stage of the process when triggered on Delete.
        /// </summary>
		[AttributeLogicalName("deletestage")]
		public GlobalEnums.WorkflowStage? Deletestage
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("deletestage");
				return (GlobalEnums.WorkflowStage?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("deletestage", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("deletestage", value);
			}
		}

        /// <summary>
        /// [MaxLength=100000] 
		/// 'Description'.<br />
        /// Description of the process.
        /// </summary>
		[AttributeLogicalName("description")]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
			    return value;
			}
			set
			{
                SetAttributeValue("description", value);
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage'.<br />
        /// Shows the default image for the record.
        /// </summary>
		[AttributeLogicalName("entityimage")]
		public byte[] DefaultImage
		{
			get
			{
				var value = GetAttributeValue<byte[]>("entityimage");
			    return value;
			}
			set
			{
                SetAttributeValue("entityimage", value);
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage_Timestamp'.<br />
        ///  
        /// </summary>
		[AttributeLogicalName("entityimage_timestamp")]
		public long? DefaultImage_Timestamp
		{
			get
			{
				var value = GetAttributeValue<long?>("entityimage_timestamp");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'EntityImage_URL'.<br />
        ///  
        /// </summary>
		[AttributeLogicalName("entityimage_url")]
		public string DefaultImage_URL
		{
			get
			{
				var value = GetAttributeValue<string>("entityimage_url");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'EntityImageId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'FormId'.<br />
        /// Unique identifier of the associated form.
        /// </summary>
		[AttributeLogicalName("formid")]
		public Guid? FormID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("formid");
			    return value;
			}
			set
			{
                SetAttributeValue("formid", value);
			}
		}

        /// <summary>
        /// [MaxLength=1073741823] 
		/// 'InputParameters'.<br />
        /// Input parameters to the process.
        /// </summary>
		[AttributeLogicalName("inputparameters")]
		public string InputParameters
		{
			get
			{
				var value = GetAttributeValue<string>("inputparameters");
			    return value;
			}
			set
			{
                SetAttributeValue("inputparameters", value);
			}
		}

        /// <summary>
        /// [MaxLength=48] 
		/// 'IntroducedVersion'.<br />
        /// Version in which the form is introduced.
        /// </summary>
		[AttributeLogicalName("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				var value = GetAttributeValue<string>("introducedversion");
			    return value;
			}
			set
			{
                SetAttributeValue("introducedversion", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsCrmUIWorkflow'.<br />
        /// Indicates whether the process was created using the Microsoft Dynamics 365 Web application.
        /// </summary>
		[AttributeLogicalName("iscrmuiworkflow")]
		public bool? IsCRMProcess
		{
			get
			{
				var value = GetAttributeValue<bool?>("iscrmuiworkflow");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'IsCustomizable'.<br />
        /// Information that specifies whether this component can be customized.
        /// </summary>
		[AttributeLogicalName("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				var value = GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			    return value;
			}
			set
			{
                SetAttributeValue("iscustomizable", value);
			}
		}

        /// <summary>
        ///  
		/// 'IsManaged'.<br />
        /// Indicates whether the solution component is part of a managed solution.
        /// </summary>
		[AttributeLogicalName("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				var value = GetAttributeValue<bool?>("ismanaged");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'IsTransacted'.<br />
        /// Whether or not the steps in the process are executed in a single transaction.
        /// </summary>
		[AttributeLogicalName("istransacted")]
		public bool? IsTransacted
		{
			get
			{
				var value = GetAttributeValue<bool?>("istransacted");
			    return value;
			}
			set
			{
                SetAttributeValue("istransacted", value);
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'LanguageCode'.<br />
        /// Language of the process.
        /// </summary>
		[AttributeLogicalName("languagecode")]
		public int? Language
		{
			get
			{
				var value = GetAttributeValue<int?>("languagecode");
			    return value;
			}
			set
			{
                SetAttributeValue("languagecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'Mode'.<br />
        /// Shows the mode of the process.
        /// </summary>
		[AttributeLogicalName("mode")]
		public ModeEnum? Mode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("mode");
				return (ModeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("mode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("mode", value);
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who last modified the process.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Id;
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the process was last modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who last modified the process.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Id;
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
                return value?.Name;
            }
        }

        /// <summary>
        /// [MaxLength=100] 
		/// 'Name'.<br />
        /// Name of the process.
        /// </summary>
		[AttributeLogicalName("name")]
		public string ProcessName
		{
			get
			{
				var value = GetAttributeValue<string>("name");
			    return value;
			}
			set
			{
                SetAttributeValue("name", value);
			}
		}

        /// <summary>
        ///  
		/// 'OnDemand'.<br />
        /// Indicates whether the process is able to run as an on-demand process.
        /// </summary>
		[AttributeLogicalName("ondemand")]
		public bool? RunasOnDemand
		{
			get
			{
				var value = GetAttributeValue<bool?>("ondemand");
			    return value;
			}
			set
			{
                SetAttributeValue("ondemand", value);
			}
		}

        /// <summary>
        ///  
		/// 'OverwriteTime'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overwritetime");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Unique identifier of the user or team who owns the process.
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public Guid? Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
                return value?.Id;
			}
			set
			{
                if (value != null) SetAttributeValue("ownerid", new EntityReference("systemuser", value.Value));
                else
	                SetAttributeValue("ownerid", value);
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier of the business unit that owns the process.
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
                return value?.Id;
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier of the team who owns the process.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
                return value?.Id;
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier of the user who owns the process.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
                return value?.Id;
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'ParentWorkflowId'.<br />
        /// Unique identifier of the definition for process activation.
        /// </summary>
		[AttributeLogicalName("parentworkflowid")]
		public Guid? ParentProcessID
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentworkflowid");
                return value?.Id;
			}
		}

        public string ParentProcessIDName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentworkflowid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'PluginTypeId'.<br />
        /// Unique identifier of the plug-in type.
        /// </summary>
		[AttributeLogicalName("plugintypeid")]
		public Guid? PluginTypeId
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("plugintypeid");
                return value?.Id;
			}
		}

        public string PluginTypeIdName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("plugintypeid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'PrimaryEntity'.<br />
        /// Primary entity for the process. The process can be associated for one or more SDK operations defined on the primary entity.
        /// </summary>
		[AttributeLogicalName("primaryentity")]
		public string PrimaryEntity
		{
			get
			{
				var value = GetAttributeValue<string>("primaryentity");
			    return value;
			}
			set
			{
                SetAttributeValue("primaryentity", value);
			}
		}

        /// <summary>
        /// [Range(0, 2147483647)] 
		/// 'ProcessOrder'.<br />
        /// Type the business process flow order.
        /// </summary>
		[AttributeLogicalName("processorder")]
		public int? ProcessOrder
		{
			get
			{
				var value = GetAttributeValue<int?>("processorder");
			    return value;
			}
			set
			{
                SetAttributeValue("processorder", value);
			}
		}

        /// <summary>
        /// [MaxLength=1048576] 
		/// 'ProcessRoleAssignment'.<br />
        /// Contains the role assignment for the process.
        /// </summary>
		[AttributeLogicalName("processroleassignment")]
		public string RoleassignmentforProcess
		{
			get
			{
				var value = GetAttributeValue<string>("processroleassignment");
			    return value;
			}
			set
			{
                SetAttributeValue("processroleassignment", value);
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'Rank'.<br />
        /// Indicates the rank for order of execution for the synchronous workflow.
        /// </summary>
		[AttributeLogicalName("rank")]
		public int? Rank
		{
			get
			{
				var value = GetAttributeValue<int?>("rank");
			    return value;
			}
			set
			{
                SetAttributeValue("rank", value);
			}
		}

        /// <summary>
        ///  
		/// 'RendererObjectTypeCode'.<br />
        /// The renderer type of Workflow
        /// </summary>
		[AttributeLogicalName("rendererobjecttypecode")]
		public string RendererType
		{
			get
			{
				var value = GetAttributeValue<string>("rendererobjecttypecode");
			    return value;
			}
			set
			{
                SetAttributeValue("rendererobjecttypecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'RunAs'.<br />
        /// Specifies the system user account under which a workflow executes.
        /// </summary>
		[AttributeLogicalName("runas")]
		public GlobalEnums.ExecutingUser? RunAsUser
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("runas");
				return (GlobalEnums.ExecutingUser?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("runas", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("runas", value);
			}
		}

        /// <summary>
        ///  
		/// 'Scope'.<br />
        /// Scope of the process.
        /// </summary>
		[AttributeLogicalName("scope")]
		public ScopeEnum? Scope
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("scope");
				return (ScopeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("scope", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("scope", value);
			}
		}

        /// <summary>
        ///  
		/// 'SdkMessageId'.<br />
        /// Unique identifier of the SDK Message associated with this workflow.
        /// </summary>
		[AttributeLogicalName("sdkmessageid")]
		public Guid? SDKMessage
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
                return value?.Id;
			}
		}

        public string SDKMessageName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("sdkmessageid");
                return value?.Name;
            }
        }

        /// <summary>
        ///  
		/// 'SolutionId'.<br />
        /// Unique identifier of the associated solution.
        /// </summary>
		[AttributeLogicalName("solutionid")]
		public Guid? Solution_SolutionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("solutionid");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Status of the process.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				return (StatusEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statecode", value);
			}
		}

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Additional information about status of the process.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				return (StatusReasonEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("statuscode", value);
			}
		}

        /// <summary>
        ///  
		/// 'Subprocess'.<br />
        /// Indicates whether the process can be included in other processes as a child process.
        /// </summary>
		[AttributeLogicalName("subprocess")]
		public bool? IsChildProcess
		{
			get
			{
				var value = GetAttributeValue<bool?>("subprocess");
			    return value;
			}
			set
			{
                SetAttributeValue("subprocess", value);
			}
		}

        /// <summary>
        ///  
		/// 'SyncWorkflowLogOnFailure'.<br />
        /// Select whether synchronous workflow failures will be saved to log files.
        /// </summary>
		[AttributeLogicalName("syncworkflowlogonfailure")]
		public bool? LoguponFailure
		{
			get
			{
				var value = GetAttributeValue<bool?>("syncworkflowlogonfailure");
			    return value;
			}
			set
			{
                SetAttributeValue("syncworkflowlogonfailure", value);
			}
		}

        /// <summary>
        ///  
		/// 'TriggerOnCreate'.<br />
        /// Indicates whether the process will be triggered when the primary entity is created.
        /// </summary>
		[AttributeLogicalName("triggeroncreate")]
		public bool? TriggerOnCreate
		{
			get
			{
				var value = GetAttributeValue<bool?>("triggeroncreate");
			    return value;
			}
			set
			{
                SetAttributeValue("triggeroncreate", value);
			}
		}

        /// <summary>
        ///  
		/// 'TriggerOnDelete'.<br />
        /// Indicates whether the process will be triggered on deletion of the primary entity.
        /// </summary>
		[AttributeLogicalName("triggerondelete")]
		public bool? TriggerOnDelete
		{
			get
			{
				var value = GetAttributeValue<bool?>("triggerondelete");
			    return value;
			}
			set
			{
                SetAttributeValue("triggerondelete", value);
			}
		}

        /// <summary>
        /// [MaxLength=1073741823] 
		/// 'TriggerOnUpdateAttributeList'.<br />
        /// Attributes that trigger the process when updated.
        /// </summary>
		[AttributeLogicalName("triggeronupdateattributelist")]
		public string TriggerOnUpdateAttributeList
		{
			get
			{
				var value = GetAttributeValue<string>("triggeronupdateattributelist");
			    return value;
			}
			set
			{
                SetAttributeValue("triggeronupdateattributelist", value);
			}
		}

        /// <summary>
        ///  
		/// 'Type'.<br />
        /// Type of the process.
        /// </summary>
		[AttributeLogicalName("type")]
		public TypeEnum? Type
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("type");
				return (TypeEnum?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("type", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("type", value);
			}
		}

        /// <summary>
        /// [MaxLength=1073741823] 
		/// 'UIData'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("uidata")]
		public string UIData
		{
			get
			{
				var value = GetAttributeValue<string>("uidata");
			    return value;
			}
		}

        /// <summary>
        /// [MaxLength=256] 
		/// 'UniqueName'.<br />
        /// Unique name of the process
        /// </summary>
		[AttributeLogicalName("uniquename")]
		public string UniqueName
		{
			get
			{
				var value = GetAttributeValue<string>("uniquename");
			    return value;
			}
			set
			{
                SetAttributeValue("uniquename", value);
			}
		}

        /// <summary>
        ///  
		/// 'UpdateStage'.<br />
        /// Select the stage a process will be triggered on update.
        /// </summary>
		[AttributeLogicalName("updatestage")]
		public GlobalEnums.WorkflowStage? UpdateStage
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("updatestage");
				return (GlobalEnums.WorkflowStage?)value?.Value;
			}
			set
			{
                if (value != null) SetAttributeValue("updatestage", new OptionSetValue((int) value.Value));
                else
	                SetAttributeValue("updatestage", value);
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
			    return value;
			}
		}

        /// <summary>
        ///  
		/// 'WorkflowId'.<br />
        /// Unique identifier of the process.
        /// </summary>
		[AttributeLogicalName("workflowid")]
		public Guid? ProcessId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("workflowid");
			    return value;
			}
			set
			{
                if (value != null)
	                SetAttributeValue("workflowid", value);
				if (value != null) base.Id = value.Value;
				else Id = System.Guid.Empty;
			}
		}

        /// <summary>
        ///  
		/// 'WorkflowIdUnique'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("workflowidunique")]
		public Guid? WorkflowIdUnique
		{
			get
			{
				var value = GetAttributeValue<Guid?>("workflowidunique");
			    return value;
			}
		}

        /// <summary>
        /// [Required][MaxLength=1073741823] 
		/// 'Xaml'.<br />
        /// XAML that defines the process.
        /// </summary>
		[AttributeLogicalName("xaml")]
		public string Xaml
		{
			get
			{
				var value = GetAttributeValue<string>("xaml");
			    return value;
			}
			set
			{
                SetAttributeValue("xaml", value);
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'workflow_active_workflow'
		/// </summary>
		[RelationshipSchemaName("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Process[] ProcesssOfActiveProcessID
		{
			get => GetRelatedEntities<Process>("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// 1:N, 'workflow_parent_workflow'
		/// </summary>
		[RelationshipSchemaName("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Process[] ProcesssOfParentProcessID
		{
			get => GetRelatedEntities<Process>("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced)?.ToArray();
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                value?.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
			}
		}
		
		/// <summary>
		/// N:1, 'system_user_workflow'
		/// </summary>
		[RelationshipSchemaName("system_user_workflow"), AttributeLogicalName("owninguser")]
		public User UserAsOwningUser
		{
			get => GetRelatedEntity<User>("system_user_workflow", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("system_user_workflow", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'workflow_active_workflow'
		/// </summary>
		[RelationshipSchemaName("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("activeworkflowid")]
		public Process ProcessAsActiveProcessID
		{
			get => GetRelatedEntity<Process>("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Process>("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		/// <summary>
		/// N:1, 'workflow_createdby'
		/// </summary>
		[RelationshipSchemaName("workflow_createdby"), AttributeLogicalName("createdby")]
		public User UserAsCreatedBy
		{
			get => GetRelatedEntity<User>("workflow_createdby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("workflow_createdby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'workflow_createdonbehalfby'
		/// </summary>
		[RelationshipSchemaName("workflow_createdonbehalfby"), AttributeLogicalName("createdonbehalfby")]
		public User UserAsCreatedByDelegate
		{
			get => GetRelatedEntity<User>("workflow_createdonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("workflow_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'workflow_modifiedby'
		/// </summary>
		[RelationshipSchemaName("workflow_modifiedby"), AttributeLogicalName("modifiedby")]
		public User UserAsModifiedBy
		{
			get => GetRelatedEntity<User>("workflow_modifiedby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("workflow_modifiedby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'workflow_modifiedonbehalfby'
		/// </summary>
		[RelationshipSchemaName("workflow_modifiedonbehalfby"), AttributeLogicalName("modifiedonbehalfby")]
		public User UserAsModifiedByDelegate
		{
			get => GetRelatedEntity<User>("workflow_modifiedonbehalfby", null);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<User>("workflow_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1, 'workflow_parent_workflow'
		/// </summary>
		[RelationshipSchemaName("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentworkflowid")]
		public Process ProcessAsParentProcessID
		{
			get => GetRelatedEntity<Process>("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			set
			{
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null) value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Process>("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
			}
		}
		
		public static class RelationNames {
			public static RelationName ProcesssOfActiveProcessID = new RelationName("ProcesssOfActiveProcessID");
			public static RelationName ProcesssOfParentProcessID = new RelationName("ProcesssOfParentProcessID");
			public static RelationName UserAsOwningUser = new RelationName("UserAsOwningUser");
			public static RelationName ProcessAsActiveProcessID = new RelationName("ProcessAsActiveProcessID");
			public static RelationName UserAsCreatedBy = new RelationName("UserAsCreatedBy");
			public static RelationName UserAsCreatedByDelegate = new RelationName("UserAsCreatedByDelegate");
			public static RelationName UserAsModifiedBy = new RelationName("UserAsModifiedBy");
			public static RelationName UserAsModifiedByDelegate = new RelationName("UserAsModifiedByDelegate");
			public static RelationName ProcessAsParentProcessID = new RelationName("ProcessAsParentProcessID");
		}

		public override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["ProcesssOfActiveProcessID"] = new object[] { "ProcesssOfActiveProcessID", "workflow", "workflow", "activeworkflowid", "workflowid", "workflowid", "workflowid", "workflow_active_workflow", typeof (Process[]) };
			relationProperties["ProcesssOfParentProcessID"] = new object[] { "ProcesssOfParentProcessID", "workflow", "workflow", "parentworkflowid", "workflowid", "workflowid", "workflowid", "workflow_parent_workflow", typeof (Process[]) };
			relationProperties["UserAsOwningUser"] = new object[] { "UserAsOwningUser", "systemuser", "workflow", "systemuserid", "owninguser", "workflowid", "workflowid", "system_user_workflow", typeof (User) };
			relationProperties["ProcessAsActiveProcessID"] = new object[] { "ProcessAsActiveProcessID", "workflow", "workflow", "workflowid", "activeworkflowid", "workflowid", "workflowid", "workflow_active_workflow", typeof (Process) };
			relationProperties["UserAsCreatedBy"] = new object[] { "UserAsCreatedBy", "systemuser", "workflow", "systemuserid", "createdby", "workflowid", "workflowid", "workflow_createdby", typeof (User) };
			relationProperties["UserAsCreatedByDelegate"] = new object[] { "UserAsCreatedByDelegate", "systemuser", "workflow", "systemuserid", "createdonbehalfby", "workflowid", "workflowid", "workflow_createdonbehalfby", typeof (User) };
			relationProperties["UserAsModifiedBy"] = new object[] { "UserAsModifiedBy", "systemuser", "workflow", "systemuserid", "modifiedby", "workflowid", "workflowid", "workflow_modifiedby", typeof (User) };
			relationProperties["UserAsModifiedByDelegate"] = new object[] { "UserAsModifiedByDelegate", "systemuser", "workflow", "systemuserid", "modifiedonbehalfby", "workflowid", "workflowid", "workflow_modifiedonbehalfby", typeof (User) };
			relationProperties["ProcessAsParentProcessID"] = new object[] { "ProcessAsParentProcessID", "workflow", "workflow", "workflowid", "parentworkflowid", "workflowid", "workflowid", "workflow_parent_workflow", typeof (Process) };
			return relationProperties; } }

		#endregion

		/// <inheritdoc/>
		public Process(object obj) : base(obj, EntityLogicalName)
		{
            foreach (var p in obj.GetType().GetProperties())
            {
                var value = p.GetValue(obj, null);
                if (p.PropertyType == typeof(Guid))
                {
                    base.Id = (Guid)value;
                    Attributes["workflowid"] = base.Id;
                }
                else if (p.Name == "FormattedValues")
                {
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}

		#region Label/value pairs

		public enum DeleteJobOnCompletionEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum BusinessProcessTypeEnum
		{
			BusinessFlow = 0,
			TaskFlow = 1,
		}
	
		public enum CategoryEnum
		{
			Workflow = 0,
			Dialog = 1,
			BusinessRule = 2,
			Action = 3,
			BusinessProcessFlow = 4,
		}
	
		public enum IsCRMProcessEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum IsManagedEnum
		{
			Managed = 1,
			Unmanaged = 0,
		}
	
		public enum IsTransactedEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum ModeEnum
		{
			Background = 0,
			Realtime = 1,
		}
	
		public enum RunasOnDemandEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum PrimaryEntityEnum
		{
		}
	
		public enum RendererTypeEnum
		{
		}
	
		public enum ScopeEnum
		{
			User = 1,
			BusinessUnit = 2,
			ParentChildBusinessUnits = 3,
			Organization = 4,
		}
	
		public enum StatusEnum
		{
			Draft = 0,
			Activated = 1,
		}
	
		public enum StatusReasonEnum
		{
			Draft = 1,
			Activated = 2,
		}
	
		public enum IsChildProcessEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum LoguponFailureEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum TriggerOnCreateEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum TriggerOnDeleteEnum
		{
			Yes = 1,
			No = 0,
		}
	
		public enum TypeEnum
		{
			Definition = 1,
			Activation = 2,
			Template = 3,
		}
	
		#endregion

		#region Metadata


		#endregion
	}

	#endregion

	#endregion

	#region GlobalEnums

	public class GlobalEnums
	{
		public enum DependencyType
		{
			None = 0,
			SolutionInternal = 1,
			Published = 2,
			Unpublished = 4,
		}

		public enum ComponentType
		{
			Entity = 1,
			Attribute = 2,
			Relationship = 3,
			AttributePicklistValue = 4,
			AttributeLookupValue = 5,
			ViewAttribute = 6,
			LocalizedLabel = 7,
			RelationshipExtraCondition = 8,
			OptionSet = 9,
			EntityRelationship = 10,
			EntityRelationshipRole = 11,
			EntityRelationshipRelationships = 12,
			ManagedProperty = 13,
			EntityKey = 14,
			Privilege = 16,
			PrivilegeObjectTypeCode = 17,
			Role = 20,
			RolePrivilege = 21,
			DisplayString = 22,
			DisplayStringMap = 23,
			Form = 24,
			Organization = 25,
			SavedQuery = 26,
			Workflow = 29,
			Report = 31,
			ReportEntity = 32,
			ReportCategory = 33,
			ReportVisibility = 34,
			Attachment = 35,
			EmailTemplate = 36,
			ContractTemplate = 37,
			KBArticleTemplate = 38,
			MailMergeTemplate = 39,
			DuplicateRule = 44,
			DuplicateRuleCondition = 45,
			EntityMap = 46,
			AttributeMap = 47,
			RibbonCommand = 48,
			RibbonContextGroup = 49,
			RibbonCustomization = 50,
			RibbonRule = 52,
			RibbonTabToCommandMap = 53,
			RibbonDiff = 55,
			SavedQueryVisualization = 59,
			SystemForm = 60,
			WebResource = 61,
			SiteMap = 62,
			ConnectionRole = 63,
			ComplexControl = 64,
			FieldSecurityProfile = 70,
			FieldPermission = 71,
			PluginType = 90,
			PluginAssembly = 91,
			SDKMessageProcessingStep = 92,
			SDKMessageProcessingStepImage = 93,
			ServiceEndpoint = 95,
			RoutingRule = 150,
			RoutingRuleItem = 151,
			SLA = 152,
			SLAItem = 153,
			ConvertRule = 154,
			ConvertRuleItem = 155,
			HierarchyRule = 65,
			MobileOfflineProfile = 161,
			MobileOfflineProfileItem = 162,
			SimilarityRule = 165,
			CustomControl = 66,
			CustomControlDefaultConfig = 68,
			DataSourceMapping = 166,
			SDKMessage = 201,
			SDKMessageFilter = 202,
			SdkMessagePair = 203,
			SdkMessageRequest = 204,
			SdkMessageRequestField = 205,
			SdkMessageResponse = 206,
			SdkMessageResponseField = 207,
			WebWizard = 210,
			Index = 18,
			ImportMap = 208,
		}

		public enum ComponentState
		{
			Published = 0,
			Unpublished = 1,
			Deleted = 2,
			DeletedUnpublished = 3,
		}

		public enum WorkflowStage
		{
			Preoperation = 20,
			Postoperation = 40,
		}

		public enum ExecutingUser
		{
			Owner = 0,
			CallingUser = 1,
		}

	}

	#endregion

}

